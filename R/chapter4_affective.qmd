### Read data 
::: {.panel-tabset}
## R
```{r}
#| label: read-affective
affective <- read.csv("data/affective.csv")
affective$wait <- with(affective, stop - start)
affectivewlw <- read.csv("data/affectivewlw.csv")
library(survival)
```

## SAS

```{sas}
#| label: read-affective-sas
#| eval: false 
#| output: false

proc import out=affective
	datafile="data/affective.csv"
	dbms=csv replace;
run;
data affective; 
	set affective; 
	wait = stop - start; 
run; 
data angstprev; 
	set affective;
	by id;
	retain prev;
	if first.id then prev=0; 
	output; 
	if state=1 then prev=start; if state=0 then prev=stop;
run;
```
:::

### Table 4.3
::: {.panel-tabset}
## R
```{r}
#| label: table-4.3-r

# Make dataset ready for mstate 
# From Out -> In,   trans = 1
# From Out -> Dead, trans = 2
# From In -> Out,   trans = 3
# From In -> Dead,  trans = 4
# + update status variable

library(dplyr)
affectivemstate__ <- affective %>% 
  mutate(statusnew = ifelse(status == 3, 0, 1), 
         trans = case_when(state == 0 & status == 1 ~ 1, 
                           state == 0 & status == 2 ~ 2, 
                           state == 1 & status == 0 ~ 3,
                           state == 1 & status == 2 ~ 4, 
                           state == 0 & status == 3 ~ 1, 
                           state == 1 & status == 3 ~ 3))

# For each transition, we should have a censoring for the trans to the other state
affectivemstate_ <- affectivemstate__ %>% 
  mutate(statusnew = 0,
         trans = case_when(trans == 1 ~ 2,
                           trans == 2 ~ 1, 
                           trans == 3 ~ 4, 
                           trans == 4 ~ 3))

affectivemstate <- rbind(affectivemstate__, affectivemstate_) %>% arrange(id, start)
affectivemstate <- affectivemstate %>% 
  mutate(from = case_when(trans == 1 ~ 1,
                          trans == 2 ~ 1, 
                          trans == 3 ~ 2, 
                          trans == 4 ~ 2), 
         to = case_when(trans == 1 ~ 2,
                        trans == 2 ~ 3, 
                        trans == 3 ~ 1, 
                        trans == 4 ~ 3),
         starty = start/12, 
         stopy = stop/12
         )

# Subset data by disease
affective0 <- subset(affectivemstate, bip == 0)
affective1 <- subset(affectivemstate, bip == 1)

# Set-up transition matrix
tmat <- matrix(NA, 3, 3)
tmat[1, 2:3]    <- 1:2
tmat[2, c(1,3)] <- 3:4
statenames <- c("Out of hospital", "In hospital", "Dead")
dimnames(tmat) <- list(from = statenames, to = statenames)

library(mstate)
## For unipolar (bip = 0) ----------------------------------- ##
attr(affective0, 'class') <- c("msdata","data.frame")
attr(affective0, 'trans') <- tmat
# Fit empty cox model per trans
c0 <- coxph(Surv(starty, stopy, statusnew) ~ strata(trans), data = affective0)
# Make a mstate object
msf0 <- msfit(object=c0, trans=tmat)
pt0  <- probtrans(msf0, predt=0)

## For bipolar (bip = 1) ----------------------------------- ##
attr(affective1, 'class') <- c("msdata","data.frame")
attr(affective1, 'trans') <- tmat
# Fit empty cox model per trans
c1 <- coxph(Surv(starty, stopy, statusnew) ~ strata(trans), data = affective1)
# Make a mstate object
msf1 <- msfit(object=c1, trans=tmat)
pt1 <- probtrans(msf1, predt=0)


regcoefvec <- function(data, tmat, tau) {
  cx <- coxph(Surv(starty, stopy, statusnew) ~ strata(trans), data=data)
  msf0 <- msfit(object = cx, trans = tmat)
  pt0 <- probtrans(msf0, predt=0)
  mat <- ELOS(pt0, tau=tau)
  return(mat[2,])
}

set.seed(1234)
res <- msboot(theta=regcoefvec, data=affective0, B=100, id="id", tmat=tmat, tau=15)
uniest<-regcoefvec(affective0, tmat, 15)
uniboots<-matrix(c(mean(res[1,]),sqrt(var(res[1,])),
         mean(res[2,]),sqrt(var(res[2,])),
         mean(res[3,]),sqrt(var(res[3,]))),
       nrow = 3, dimnames = list(c("Out of hosp","In hosp","Dead"), c("Years","SD")))
uni<-list("estimate"=uniest,"bootstrap"=uniboots)
set.seed(1234)
res <- msboot(theta=regcoefvec, data=affective1, B=100, id="id", tmat=tmat, tau=15)
biest<-regcoefvec(affective0, tmat, 15)
biboots<-matrix(c(mean(res[1,]),sqrt(var(res[1,])),
         mean(res[2,]),sqrt(var(res[2,])),
         mean(res[3,]),sqrt(var(res[3,]))),
       nrow = 3, dimnames = list(c("Out of hosp","In hosp","Dead"), c("Years","SD")))
bi<-list("estimate"=biest,"bootstrap"=biboots)
list("Unipolar"=uni,"Bipolar"=bi)
```
## SAS - NA
:::

### Figure 4.16

::: {.panel-tabset}
## R

```{r}
#| label: figure-4.16-r

library(ggplot2)
theme_general <- theme_bw() +
  theme(legend.position = "bottom", 
        text = element_text(size = 20), 
        axis.text.x = element_text(size = 20), 
        axis.text.y = element_text(size = 20)) 

# Make data set with probabilities - predictions from state 2 (in hospital)
# bip = 0 
t0 <- data.frame(
  time = pt0[[2]]$time, 
  pstate1 = pt0[[2]]$pstate1, 
  pstate2 = pt0[[2]]$pstate2, 
  pstate3 = pt0[[2]]$pstate3, 
  bip = rep("No", nrow(pt0[[2]]))
)

# bip = 1
t1 <- data.frame(
  time = pt1[[2]]$time, 
  pstate1 = pt1[[2]]$pstate1, 
  pstate2 = pt1[[2]]$pstate2, 
  pstate3 = pt1[[2]]$pstate3, 
  bip = rep("Yes", nrow(pt1[[2]]))
)
pstate1 <- data.frame(
  type = rep("Out of hospital", nrow(pt0[[2]]) + nrow(pt1[[2]])), 
  bip = c(rep("No", nrow(pt0[[2]])), rep("Yes", nrow(pt1[[2]]))),
  pstate = c(pt0[[2]]$pstate1, pt1[[2]]$pstate1), 
  time = c(pt0[[2]]$time, pt1[[2]]$time))

pstate2 <- data.frame(
  type = rep("In hospital", nrow(pt0[[2]]) + nrow(pt1[[2]])), 
  bip = c(rep("No", nrow(pt0[[2]])), rep("Yes", nrow(pt1[[2]]))),
  pstate = c(pt0[[2]]$pstate2, pt1[[2]]$pstate2), 
  time = c(pt0[[2]]$time, pt1[[2]]$time))

pstate3 <- data.frame(
  type = rep("Dead", nrow(pt0[[2]]) + nrow(pt1[[2]])),
  bip = c(rep("No", nrow(pt0[[2]])), rep("Yes", nrow(pt1[[2]]))),
  pstate = c(pt0[[2]]$pstate3, pt1[[2]]$pstate3), 
  time = c(pt0[[2]]$time, pt1[[2]]$time))

probs <- rbind(pstate1, pstate2, pstate3)

# A couple of places, a very small negative probability is predicted
# We fix it + sum here
t <- probs[probs$pstate <0,]$time #<-0

probs[probs$bip == "No" & probs$time == t[1], "pstate"]  <- 
  c(probs[probs$bip == "No" & probs$time == t[1], "pstate"] %*% c(1,1,0), 
    0, 
    probs[probs$bip == "No" & probs$time == t[1], "pstate"] %*% c(0,0,1))

probs[probs$bip == "No" & probs$time == t[2], "pstate"]  <- 
  c(probs[probs$bip == "No" & probs$time == t[2], "pstate"] %*% c(1,1,0), 
    0, 
    probs[probs$bip == "No" & probs$time == t[2], "pstate"] %*% c(0,0,1))

probs[probs$bip == "No" & probs$time == t[3], "pstate"]  <- 
  c(probs[probs$bip == "No" & probs$time == t[3], "pstate"] %*% c(1,1,0), 
    0, 
    probs[probs$bip == "No" & probs$time == t[3], "pstate"] %*% c(0,0,1))

probs[probs$bip == "No" & probs$time == t[4], "pstate"]  <- 
  c(probs[probs$bip == "No" & probs$time == t[4], "pstate"] %*% c(1,1,0), 
    0, 
    probs[probs$bip == "No" & probs$time == t[4], "pstate"] %*% c(0,0,1))


probs[probs$bip == "Yes" & probs$time == t[5], "pstate"]  <- 
  c(probs[probs$bip == "Yes" & probs$time == t[5], "pstate"] %*% c(1,1,0), 
    0, 
    probs[probs$bip == "Yes" & probs$time == t[5], "pstate"] %*% c(0,0,1))


probs[probs$bip == "Yes" & probs$time == t[6], "pstate"]  <- 
  c(probs[probs$bip == "Yes" & probs$time == t[6], "pstate"] %*% c(1,1,0), 
    0, 
    probs[probs$bip == "Yes" & probs$time == t[6], "pstate"] %*% c(0,0,1))


probs[probs$bip == "Yes" & probs$time == t[7], "pstate"]  <- 
  c(probs[probs$bip == "Yes" & probs$time == t[7], "pstate"] %*% c(1,1,0), 
    0, 
    probs[probs$bip == "Yes" & probs$time == t[7], "pstate"] %*% c(0,0,1))

probs[probs$bip == "Yes" & probs$time == t[8], "pstate"]  <- 
  c(probs[probs$bip == "Yes" & probs$time == t[8], "pstate"] %*% c(1,1,0), 
    0, 
    probs[probs$bip == "Yes" & probs$time == t[8], "pstate"] %*% c(0,0,1))

probs[probs$bip == "Yes" & probs$time == t[9], "pstate"]  <- 
  c(probs[probs$bip == "Yes" & probs$time == t[9], "pstate"] %*% c(1,1,0), 
    0, 
    probs[probs$bip == "Yes" & probs$time == t[9], "pstate"] %*% c(0,0,1))

probs[probs$bip == "Yes" & probs$time == t[10], "pstate"]  <- 
  c(probs[probs$bip == "Yes" & probs$time == t[10], "pstate"] %*% c(1,1,0), 
    0, 
    probs[probs$bip == "Yes" & probs$time == t[10], "pstate"] %*% c(0,0,1))


probs2 <- probs[order(probs$bip, probs$type, probs$time, probs$pstate, decreasing = F),]

library(ggpattern)
p1 <- ggplot(aes(x = time), data = subset(probs2, bip == "No")) +
  geom_area_pattern(aes(y = pstate, 
                        pattern = type,
                        pattern_fill = type ), 
                    fill = 'white', 
                    colour = 'black', 
                    #pattern_density = 0.02, 
                    pattern_aspect_ratio = 1,
                    pattern_fill = 'darkgrey', 
                    pattern_color = 'black', 
                    pattern_spacing = 0.02,
                    linewidth = 0.7) + 
  ylab("Probability") + 
  xlab("Time since first admission (years)") + 
  scale_pattern_discrete(name = c("State"), 
                         choices = c("circle", "stripe", "crosshatch")) + 
  scale_pattern_fill_discrete(name = c("State")) + 
  scale_pattern_spacing_discrete(name = c("State")) + 
  theme_general + ggtitle("Unipolar") + 
  theme(legend.key.size = unit(1, 'cm'))

p2 <- ggplot(aes(x = time), data = subset(probs2, bip == "Yes")) +
  geom_area_pattern(aes(y = pstate, 
                        pattern = type,
                        pattern_fill = type ), 
                    fill = 'white', 
                    colour = 'black', 
                    #pattern_density = 0.02, 
                    pattern_aspect_ratio = 1,
                    pattern_fill = 'darkgrey', 
                    pattern_color = 'black', 
                    pattern_spacing = 0.02,
                    linewidth = 0.7) + 
  ylab("Probability") + 
  xlab("Time since first admission (years)") + 
  scale_pattern_discrete(name = c("State"),
                         choices = c("circle", "stripe", "crosshatch")) + 
  scale_pattern_fill_discrete(name = c("State")) + 
  scale_pattern_spacing_discrete(name = c("State")) + 
  theme_general + ggtitle("Bipolar") + 
  theme(legend.key.size = unit(1, 'cm'))

# common legend
library(grid)
library(gridExtra)
plots <- list(p1, p2)
g <- ggplotGrob(plots[[1]] + theme(legend.position="bottom"))$grobs
legend <- g[[which(sapply(g, function(x) x$name) == "guide-box")]]
lheight <- sum(legend$height)
tmp <- arrangeGrob(p1 + theme(legend.position = "none"), 
                   p2 + theme(legend.position = "none"), 
                   layout_matrix = matrix(c(1, 2), nrow = 1))


fig4.16<-grid.arrange(tmp, legend, ncol = 1, 
                       heights = unit.c(unit(1, "npc") - lheight, lheight))

```

## SAS - NA

:::

### Table 4.7

::: {.panel-tabset}
## R
```{r}
#| label: table-4.7-r

# In years
library(dplyr)
affective <- affective %>% mutate(starty = start / 12, stopy = stop / 12) %>% group_by(id) %>% 
                mutate(prevy1 = lag(starty, n = 1, default = 0), 
                       prevy2 = lag(stopy, n = 1, default = 0),
                       prevy = ifelse(state == 1, prevy2, prevy1))

# LWYY model - Mortality treated as censoring 
subaff<-data.frame(subset(affective, state == 0 | status %in% c(2,3)))
fit1 <- coxph(Surv(prevy, stopy, status == 1) ~ bip + cluster(id), 
              data = subaff, ties = "breslow")
summary(fit1)

# Ghosh-Lin model - Mortality treated as competing risk
library(mets)
fit2 <- recreg(Event(prevy, stopy, status) ~ bip + cluster(id),
               data = subaff, cause = 1, cens.code = 3, death.code = 2)
summary(fit2)
```

## SAS
```{sas}
#| label: table-4.7
#| eval: false 
#| output: false

* LWYY model - Mortality treated as censoring; 
proc phreg covs(aggregate) data=angstprev;
	where state=0 or status=2 or status=3;
	class bip (ref='0');
	model stop*status(2 3)=bip/entry=prev rl;
	id id;
run;

                              Analysis of Maximum Likelihood Estimates

                 Parameter   Standard StdErr                         Hazard  95% Hazard Ratio
 Parameter   DF   Estimate      Error  Ratio Chi-Square Pr > ChiSq    Ratio Confidence Limits

 bip       1  1    0.42063    0.18165  1.923     5.3621     0.0206    1.523    1.067    2.174


* Ghosh-Lin model - Mortality treated as competing risk; 
proc phreg data=angstprev;
	where state=0 or status=2 or status=3;
	class bip (ref='0');
	model stop*status(3)=bip/entry=prev eventcode=1 rl;
run;

                              Analysis of Maximum Likelihood Estimates

                  Parameter    Standard                            Hazard   95% Hazard Ratio
Parameter    DF    Estimate       Error  Chi-Square  Pr > ChiSq     Ratio   Confidence Limits

bip       1   1     0.66630     0.13971     22.7440      <.0001     1.947     1.481     2.560


```
:::

### In-text, p. 145: Cox for mortality
::: {.panel-tabset}
## R
```{r}
#| label: in-text-cox-mort-r
summary(coxph(Surv(start,stop,status==2)~bip,data=affective,ties="breslow"))
```
## SAS
```{sas}
#| label: in-text-cox-mort-sas
#| eval: false 
#| output: false
proc phreg data=affective;
  model (start,stop)*status(0,1,3) = bip / rl;
run;
```
:::

### Figure 4.18

::: {.panel-tabset}
## R
```{r}
#| label: figure-4.18-r

theme_general <- theme_bw() +
  theme(legend.position = "bottom", 
        legend.title=element_blank(),
        legend.text = element_text(size = 20),
        text = element_text(size = 20), 
        axis.text.x = element_text(size = 20), 
        axis.text.y = element_text(size = 20)) 

# Use Nelson-Aalen to estimate marginal mean, incorrectly censoring for death 
naa_est <- survfit(Surv(prevy, stopy, status == 1) ~ bip + cluster(id), 
    data = subset(affective, stopy > prevy & (state == 0 | status %in% c(2,3))), 
                   ctype = 1)
# Collect data for plotting
plotdata <- data.frame(time = naa_est$time, 
                       mu = naa_est$cumhaz, 
                       bip = c(rep("No", naa_est$strata[[1]]), 
                               rep("Yes", naa_est$strata[[2]])))

fig4.18 <- ggplot(aes(x = time, y = mu, linetype = bip), data = plotdata) + 
  geom_step(size = 1) + 
  xlab("Time since first admission (years)") + 
  ylab("Expected number of episodes") + 
  scale_linetype_manual("Bipolar", values = c("dashed", "solid"),
                        labels=c("Unipolar","Bipolar")) + 
  scale_x_continuous(expand = expansion(mult = c(0.005, 0.05)), 
                     limits = c(0, 30), 
                     breaks = seq(0, 30, by = 5)) + 
  scale_y_continuous(expand = expansion(mult = c(0.005, 0.05)), 
                     limits = c(0, 10), 
                     breaks = seq(0, 10, by = 2)) +
  theme_general + 
  theme(legend.box = "vertical",
        legend.key.size = unit(1.5, 'cm'))
fig4.18
```

## SAS
```{sas}
#| label:  figure-4.18-sas
#| eval: false 
#| output: false

ods graphics on; 
proc phreg plots(overlay=row)=mcf covs(aggregate) data=angstprev;
	where state=0 or status=2 or status=3;
	class bip;
	model stop*status(2 3)=/entry=prev;
	id id;
	strata bip;
	baseline out=mcfdata cmf=naa;
run;
data mcfdata; set mcfdata;
	years=stop/12;
run;
proc gplot data=mcfdata;
	plot naa*years=bip/haxis=axis1 vaxis=axis2;
	axis1 order=0 to 30 by 5 minor=none label=('Years');
	axis2 order=0 to 12 by 2 minor=none label=(a=90 'Expected number of episodes');
	symbol1  v=none i=stepjl c=red;
	symbol2  v=none i=stepjl c=blue;
run;
quit;

```
:::

### Figure 4.19

::: {.panel-tabset}
## R
```{r}
#| label: figure-4.19-r

theme_general <- theme_bw() +
  theme(legend.position = "bottom", 
        legend.title=element_blank(),
        legend.text = element_text(size = 20),
        text = element_text(size = 20), 
        axis.text.x = element_text(size = 20), 
        axis.text.y = element_text(size = 20)) 

library(mets)
xr <- phreg(Surv(prevy, stopy, status == 1) ~ strata(bip) + cluster(id),
            data = subset(affective, state == 0 | status %in% c(2,3)))
xd <- phreg(Surv(prevy, stopy, status == 2) ~ strata(bip) + cluster(id),
            data = subset(affective, state == 0 | status %in% c(2,3)))

out <- recurrentMarginal(xr, xd)
pout <- data.frame(time = out$cumhaz[,1], 
                   mu = out$cumhaz[,2],
                   bip = as.factor(out$strata))

NAa_fit <- survfit(Surv(prevy, stopy, status == 1) ~ strata(bip),
                   data = subset(affective, state == 0 | status %in% c(2,3)),
                   id = id, ctype = 1, timefix = FALSE)
  
KM_fit <- survfit(Surv(prevy, stopy, status == 2) ~ strata(bip),
                  data = subset(affective, state == 0 | status %in% c(2,3)),
                  id = id, timefix = FALSE)
  
# Adjust hat(mu)
lS0 <- dplyr::lag(KM_fit$surv[1:(KM_fit$strata[1])], default = 1)
dA0 <- diff(NAa_fit$cumhaz[1:NAa_fit$strata[1]])
mu_adj0 <- cumsum(lS0 * c(0, dA0))

lS1 <- dplyr::lag(KM_fit$surv[(KM_fit$strata[1]+1):(KM_fit$strata[1] + KM_fit$strata[2])], default = 1)
dA1 <- diff(NAa_fit$cumhaz[(KM_fit$strata[1]+1):(KM_fit$strata[1] + KM_fit$strata[2])])
mu_adj1 <- cumsum(lS1 * c(0, dA1))

plotdata2 <- data.frame(time = KM_fit$time, 
                       mu = c(mu_adj0, mu_adj1), 
                       bip = c(rep("No", length(mu_adj0)), 
                               rep("Yes", length(mu_adj1))))

fig4.19 <- ggplot(aes(x = time, y = mu, linetype = bip), data = plotdata2) + 
  geom_step(linewidth = 1) + 
  xlab("Time since first admission (years)") + 
  ylab("Expected number of episodes") + 
  scale_linetype_manual("Bipolar", values = c("dashed", "solid"),
                        labels=c("Unipolar","Bipolar") ) + 
  scale_x_continuous(expand = expansion(mult = c(0.005, 0.05)), 
                     limits = c(0, 30), breaks = seq(0, 30, by = 5)) + 
  scale_y_continuous(expand = expansion(mult = c(0.005, 0.05)), 
                     limits = c(0, 10), breaks = seq(0, 10, by = 2)) +
  theme_general + 
  theme(legend.box = "vertical",
        legend.key.size = unit(1.5, 'cm'))
fig4.19

```

## SAS
```{sas}
#| label:  figure-4.19-sas
#| eval: false 
#| output: false

/* Using "fine-gray model" in PHREG gives an alternative solution to 
  the estimator for CMF using the Breslow type estimator for 
  the baseline mean function (see p. 199 in book). The estimator is not
	exactly the same as Cook-Lawless because of a different procedures 
	for ties of terminating events and censorings. If no ties 
	(or no censorings) it equals Cook & Lawless */

proc phreg data=angstprev;
	where state=0 or status=2 or status=3;
	model stop*status(3)=/entry=prev eventcode=1;
	strata bip;
	baseline out=mcfdata1 cif=naa1;
run;
data mcfdata1;
	set mcfdata1;
	cmf=-log(1-naa1);
	years=stop/12;
run;
proc gplot data=mcfdata1;
	plot cmf*years=bip/haxis=axis1 vaxis=axis2;
	axis1 order=0 to 30 by 5 minor=none label=('Years');
	axis2 order=0 to 12 by 2 minor=none label=(a=90 'Expected number of episodes');
	symbol1  v=none i=stepjl c=red;
	symbol2  v=none i=stepjl c=blue;
run;
quit;


/*** Calc Cook & Lawless or (Ghosh & Lin (GL)) estimator for CMF 'by hand' ***/
/* First create KM data for death */
proc phreg data=angstprev noprint;
	where state=0 or status=2 or status=3;
  model stop*status(1 3)= / entry=prev; /* status=2=death */
  strata bip;
  baseline out=kmdata survival=km / method=pl ;
run;
/* Second create NAa data */
proc phreg data=angstprev noprint;
	where state=0 or status=2 or status=3;
  model stop*status(2 3)= / entry=prev;/* status=1=event */
  strata bip;
  baseline out=nadata cumhaz=na;
run;
/* Use NA data to calculate dA(u), i.e., increments in NAa */
data na;
  set nadata;
  dAu=na-lag(na);
  if stop=0 then dAu=0;
  keep bip stop dAu na;
run;
/* merge NAa and KM data */
data merged;
  merge na kmdata;
  by bip stop;
run;
/* multiply S(u-) and dA(u) */
data fill;
   set merged;
   retain _km;
   if not missing(km) then _km=km;
   else km=_km;
   /* S(u-) */
   S_uminus=lag(km);
   if stop=0 then S_uminus=1;

   if dAu=. then dAu=0;
   GLfactor=S_uminus*dAu;
   keep bip stop na dAu S_uminus GLfactor;
run;
data GLdata;
  set fill;
  by bip;
  if first.bip then GL=0;
  else GL+GLfactor;
run;
proc sgplot data=GLdata;
  step x=stop y=GL / group=bip;
  step x=stop y=na / group=bip;
run;

```
:::

### Table 4.9

::: {.panel-tabset}
## R
```{r}
#| label: table-4.9-r
# Number of recurrences and death
with(subset(affective, episode < 5), table(episode, status))
apply(with(subset(affective, episode < 5), table(episode, status)), 2, cumsum)
```
## SAS
```{sas}
#| label: table-4.9-sas
#| eval: false 
#| output: false
data angstwlw; 
	set affective;
	if episode<5 and (state=0 or status=2 or status=3);
run;
proc sort data=angstwlw; 
	by id; 
run;
proc freq data=angstwlw;
	tables episode*status; 
run;
```

:::

### Table 4.10

::: {.panel-tabset}
## R

```{r}
#| label: table-4.10-r

# We're cheating here: Make WLW data ready using SAS data - see SAS code!
affectivewlw <- read.csv("data/affectivewlw.csv")
affectivewlw <- affectivewlw %>% mutate(bip1 = bip * (stratum == 1), 
                                        bip2 = bip * (stratum == 2), 
                                        bip3 = bip * (stratum == 3), 
                                        bip4 = bip * (stratum == 4))

# Composite endpoint
fit1 <- coxph(Surv(time, dc %in% c(1, 2)) ~ bip1 + bip2 + bip3 + bip4 + cluster(id) + strata(stratum), 
              data = affectivewlw, 
              ties = "breslow")
summary(fit1)

fit2 <- coxph(Surv(time, dc %in% c(1, 2)) ~ bip + cluster(id) + strata(stratum), 
              data = affectivewlw, 
              ties = "breslow")
summary(fit2)

# Cause-specific hazard of recurrence
fit3 <- coxph(Surv(time, dc %in% c(1)) ~ bip1 + bip2 + bip3 + bip4 + cluster(id) + strata(stratum), 
              data = affectivewlw, 
              ties = "breslow")
summary(fit3)

fit4 <- coxph(Surv(time, dc %in% c(1)) ~ bip + cluster(id) + strata(stratum), 
              data = affectivewlw, 
              ties = "breslow")
summary(fit4)
```

## SAS
```{sas}
#| label: table-4.10-sas
#| eval: false 
#| output: false
data angstwlw; 
	set affective;
	where episode<5 and (state=0 or status=2 or status=3);
run;
proc sort data=angstwlw; 
	by id; 
run;
data angstwlw4; 
	set angstwlw;
	by id;
	time=stop; dc=status; stratum=episode;
	output; 
	/* if last episode is not #4 then later episodes are either
		 censored (1 or 3) or the 'end in death' (2) */
	if last.id then do;
		if episode=3 then do;
			time=stop;
  		if status=1 or status=3 then dc=0; 
			if status=2 then dc=2;
			stratum=4;
			output;
  	end;
		if episode=2 then do;
			time=stop; 
			if status=1 or status=3 then dc=0; 
			if status=2  then dc=2;
			stratum=3;
			output; 
			time=stop;
			if status=1 or status=3 then dc=0; 
			if status=2 then dc=2;
			stratum=4;
			output; 
		end;
		if episode=1 then do; 
			time=stop;
			if status=1 or status=3 then dc=0; 
			if status=2 then dc=2;
			stratum=2;
			output; 
			time=stop; if status=1 or status=3 then dc=0; 
			if status=2  then dc=2;
			stratum=3;
			output; 
			time=stop;
			if status=1 or status=3 then dc=0; 
			if status=2 then dc=2;
			stratum=4;
			output; 
		end;
	end;
run;
/* to use in R */
proc export data=angstwlw4
	outfile="data/affectivewlw.csv"
	dbms=csv replace;
run;
data angstwlw4; set angstwlw4;
	bip1=bip*(stratum=1); bip2=bip*(stratum=2);
	bip3=bip*(stratum=3); bip4=bip*(stratum=4);
run;

/* composite end point */ 
proc phreg data=angstwlw4 covs(aggregate);
	model time*dc(0 3)=bip1 bip2 bip3 bip4;
	strata stratum;
	id id;
	bip: test bip1=bip2=bip3=bip4;
run;
/* Joint model */
proc phreg data=angstwlw4 covs(aggregate);
	model time*dc(0 3)=bip;
	strata stratum;
	id id;
run;

/* Cause-spec. hazards for 1.,2.,3.,4. event */
proc phreg data=angstwlw4 covs(aggregate);
	model time*dc(0 2 3)=bip1 bip2 bip3 bip4;
	strata stratum;
	id id;
	bip: test bip1=bip2=bip3=bip4;
run;
/* Joint model */
proc phreg data=angstwlw4 covs(aggregate);
	model time*dc(0 2 3)=bip;
	strata stratum;
	id id;
run;
```
:::



### Figure 4.23

::: {.panel-tabset}
## R
```{r}
#| label: figure-4.23-r
#| 
theme_general <- theme_bw() +
  theme(legend.position = "bottom", 
        text = element_text(size = 20), 
        axis.text.x = element_text(size = 20), 
        axis.text.y = element_text(size = 20)) 
# Last observations
cens <- affective %>% group_by(id) %>% slice(c(n()))
# Censoring dist, KM
censdist <- survfit(Surv(stop, status == 3) ~ 1, 
                    data = cens)
# Make data ready for plotting
pdata <- data.frame(time = censdist$time,
                    surv = censdist$surv)
fig4.23 <- ggplot(aes(x = time / 12, y = surv), data = pdata) +
  geom_step(linewidth = 1) +
  xlab("Time since first admission (years)") +
  ylab('Probability of no censoring') +
  scale_x_continuous(expand = expansion(mult = c(0.005, 0.05)),
                     limits = c(0, 30),
                     breaks = seq(0, 30, 5)) +
  scale_y_continuous(expand = expansion(mult = c(0.005, 0.005)),
                     limits = c(0, 1.0),
                     breaks = seq(0, 1.0, 0.1)) +
  theme_general
fig4.23
```

## SAS
```{sas}
#| label:  figure-4.23-sas
#| eval: false 
#| output: false

data cens; 
	set affective;
	by id;
	if last.id;
run;
proc phreg data=cens atrisk noprint;
	model stop*status(2)=;
	baseline out=angstcens survival=kmc / method=pl;
run;
data angstcens; 
	set angstcens; 
	years=stop/12; 
run;
proc gplot data=angstcens;
	plot kmc*years/haxis=axis1 vaxis=axis2;
	axis1 order=0 to 30 by 5 minor=none label=('Years');
	axis2 order=0 to 1 by 0.1 minor=none
	label=(a=90 'Probability of no censoring');
	symbol1  v=none i=stepjl c=black;
run;
quit;
```

:::


### In-text, p. 155: Cox for censoring

::: {.panel-tabset}
## R
```{r}
#| label: in-text-censoring-r
coxph(Surv(stop,status==3)~bip,data=cens)
coxph(Surv(stop,status==3)~factor(year),data=cens)
```

## SAS
```{sas}
#| label: in-text-censoring-sas
#| eval: false 
#| output: false
proc phreg data=cens;
	model stop*status(2)=bip/rl;
run;
proc phreg data=cens;
  class year;
	model stop*status(2)=year/rl;
run;
```

:::

