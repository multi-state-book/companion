```{r}
#| echo: false
leader_mi <- read.csv("c:/Users/hnrv/OneDrive - Novo Nordisk/Book/leader/data/leader_mi.csv")
```

Assume that the LEADER data set is loaded in data set `leader_mi`.


### Table 3.16

::: {.panel-tabset}
## R
```{r}
#| label: table-3.16-r
# Cox model, frailty
library(survival)
coxfrail <- coxph(Surv(start, stop, status == 1) ~ treat + frailty(id), 
                  method = "breslow", 
                  data = leader_mi)
summary(coxfrail)
sqrt(coxfrail$fvar[1]) # frailty SD

# Piecewise constant, frailty
library(frailtypack)
pcwfrail<-frailtyPenal(Surv(start, stop, status == 1) ~ cluster(id)+treat,
                       data = leader_mi, 
                       hazard = "Piecewise-equi",
                       nb.int = 5,
                       recurrentAG = TRUE)
pcwfrail
sqrt(pcwfrail$theta) # frailty SD
```

## SAS

Only Cox-type model.

```{sas}
#| label: table-3.16-sas
#| eval: false 
#| output: false

# Very (very) slow!
proc phreg data=leader_mi covs(aggregate);
  class id;
  model stop*status(0 2) = treat / entry=start; 
  random id / dist=gamma;
  title1 'Frailty model for recurrent event data';
run;
```

:::

### Table 3.17

::: {.panel-tabset}
## R
```{r}
#| label: table-3.17-r
# Joint frailty model, piece-wise constant hazards
library(frailtypack)
leader_mi$death <- ifelse(leader_mi$status == 2, 1, 0)
jointfrail_pc_eq_mi <- frailtyPenal(
  Surv(start, stop, status == 1) ~ cluster(id)+ treat + terminal(death),
  formula.terminalEvent = ~ treat,
  data = leader_mi, 
  hazard = "Piecewise-equi",
  nb.int = c(5, 5),
  recurrentAG = TRUE)

jointfrail_pc_eq_mi
sqrt(jointfrail_pc_eq_mi$theta) # Frailty SD
summary(jointfrail_pc_eq_mi)
```
## SAS-NA

:::