### Read data

::: {.panel-tabset}

## R
```{r}
#| label: read-bmt-r
bmt <- read.csv("data/bmt.csv")
bmt$intxsurv<- bmt$timedeath
bmt$dead <- bmt$death
bmt$intxrel <- ifelse(bmt$rel == 1, bmt$timerel, bmt$timedeath)
bmt$trm     <- ifelse(bmt$rel == 0 & bmt$death == 1, 1, 0)
bmt$tgvhd   <- ifelse(bmt$gvhd == 1, bmt$timegvhd, bmt$intxrel)
bmt$tanc500 <- ifelse(bmt$anc500 == 1, bmt$timeanc500, bmt$intxrel)
bmt$state0  <- bmt$rel + 2*bmt$trm
bmt$dytxanc5 <- bmt$timeanc500 * 30
```

## SAS

```{sas}
#| label: read-bmt-sas
#| eval: false 
#| output: false
proc import out=bmt
	datafile="data/bmt.csv" 
	dbms=csv replace;
run;
data bmt; 
  set bmt;
	intxsurv=timedeath;
	dead=death;
	if rel=1 then intxrel=timerel;
	if rel=0 then intxrel=timedeath;
	trm=0;
	if rel=0 and death=1 then trm=1;
	state0=rel+2*trm;
	if gvhd=1 then tgvhd=timegvhd;
	if gvhd=0 then tgvhd=intxrel;
	dytxanc5=timeanc500*30; 
run;
```

:::


### Table 5.1

::: {.panel-tabset}

## R


```{r}
#| label: table-5.1-r

# Make landmark data at 0.5, 1, 1.5, 2, 2.5
require(dplyr)
dat05 <- bmt
dat05 <- subset(bmt, intxrel >= 0.5) %>%
  mutate(time = pmin(intxrel, 6.5),
         status = ifelse(time < 6.5, state0, 0),
         landmark = 0.5,
         entry = 0.5,
         anc = ifelse(anc500 == 1 & timeanc500 <= 0.5, 1, 0),
         gvh = ifelse(gvhd == 1 & tgvhd <= 0.5, 1, 0))
# dat05

dat10 <- bmt
dat10 <- subset(bmt, intxrel >= 1.0) %>%
  mutate(time = pmin(intxrel, 7),
         status = ifelse(time < 7, state0, 0),
         landmark = 1.0,
         entry = 1.0,
         anc = ifelse(anc500 == 1 & timeanc500 <= 1, 1, 0),
         gvh = ifelse(gvhd == 1 & tgvhd <= 1, 1, 0))

dat15 <- bmt
dat15 <- subset(bmt, intxrel >= 1.5) %>%
  mutate(time = pmin(intxrel, 7.5),
         status = ifelse(time < 7.5, state0, 0),
         landmark = 1.5,
         entry = 1.5,
         anc = ifelse(anc500 == 1 & timeanc500 <= 1.5, 1, 0),
         gvh = ifelse(gvhd == 1 & tgvhd <= 1.5, 1, 0))

dat20 <- bmt
dat20 <- subset(bmt, intxrel >= 2.0) %>%
  mutate(time = pmin(intxrel, 8),
         status = ifelse(time < 8, state0, 0),
         landmark = 2,
         entry = 2,
         anc = ifelse(anc500 == 1 & timeanc500 <= 2, 1, 0),
         gvh = ifelse(gvhd == 1 & tgvhd <= 2, 1, 0))

dat25 <- bmt
dat25 <- subset(bmt, intxrel >= 2.5) %>%
  mutate(time = pmin(intxrel, 8.5),
         status = ifelse(time < 8.5, state0, 0),
         landmark = 2.5,
         entry = 2.5,
         anc = ifelse(anc500 == 1 & timeanc500 <= 2.5, 1, 0),
         gvh = ifelse(gvhd == 1 & tgvhd <= 2.5, 1, 0))


landmark <- rbind(dat05, dat10, dat15, dat20, dat25)

# Table 5.1 output
rowSums(with(landmark, table(landmark, anc > 0 | gvh > 0))) # at risk
with(landmark, table(landmark, anc)) # anc
with(landmark, table(landmark, gvh)) # gvhd

# Drop observations with stoptime = starttime
landmark <- subset(landmark, time > entry)
```

## SAS
```{sas}
#| label: table-5.1-sas
#| eval: false 
#| output: false
* landmarks at 0.5 ...  2.5 mo. horizon 6 mo. ahead;
data landmark; set bmt;
	if intxrel>=0.5 then do;
		time=min(intxrel,6.5); if time<6.5 then status=state0; 
		if time>=6.5 then status=0;
		landmark=0.5; entry=0.5;
		anc=0; if anc500=1 and timeanc500<=0.5 then anc=1;
		gvh=0; if gvhd=1 and tgvhd<=0.5 then gvh=1;
	output; end;
	if intxrel>=1 then do;
		time=min(intxrel,7); if time<7 then status=state0; 
		if time>=7 then status=0;
		landmark=1; entry=1;
		anc=0; if anc500=1 and timeanc500<=1 then anc=1;
		gvh=0; if gvhd=1 and tgvhd<=1 then gvh=1;
	output; end;
		if intxrel>=1.5 then do;
		time=min(intxrel,7.5); if time<7.5 then status=state0; 
		if time>=7.5 then status=0;
		landmark=1.5; entry=1.5;
		anc=0; if anc500=1 and timeanc500<=1.5 then anc=1;
		gvh=0; if gvhd=1 and tgvhd<=1.5 then gvh=1;
	output; end;
	if intxrel>=2 then do;
		time=min(intxrel,8); if time<8 then status=state0; 
		if time>=8 then status=0;
		landmark=2; entry=2;
		anc=0; if anc500=1 and timeanc500<=2 then anc=1;
		gvh=0; if gvhd=1 and tgvhd<=2 then gvh=1;
	output; end;
		if intxrel>=2.5 then do;
		time=min(intxrel,8.5); if time<8.5 then status=state0; 
		if time>=8.5 then status=0;
		landmark=2.5; entry=2.5;
		anc=0; if anc500=1 and timeanc500<=2.5 then anc=1;
		gvh=0; if gvhd=1 and tgvhd<=2.5 then gvh=1;
	output; end;
run;
proc freq data=landmark; 
	tables anc*landmark gvh*landmark/ nocol norow nopercent; 
run;
```
:::

### Table 5.2

::: {.panel-tabset}

## R

Note, small differences in decimals as estimates in book is from SAS.

```{r}
#| label: table-5.2-r

# Add time-varying covariates from previous object
landmarkw <- landmark %>%
  mutate(anc05 = (landmark == 0.5) * anc,
         gvh05 = (landmark == 0.5) * gvh,
         anc10 = (landmark == 1.0) * anc,
         gvh10 = (landmark == 1.0) * gvh,
         anc15 = (landmark == 1.5) * anc,
         gvh15 = (landmark == 1.5) * gvh,
         anc20 = (landmark == 2.0) * anc,
         gvh20 = (landmark == 2.0) * gvh,
         anc25 = (landmark == 2.5) * anc,
         gvh25 = (landmark == 2.5) * gvh
         )

# with(landmarkw, table(landmark, status))


library(survival)
cox_land <- coxph(Surv(entry, time, status != 0) ~ cluster(id) + strata(landmark) +
                    anc05 + anc10 + anc15 + anc20 + anc25 +
                    gvh05 + gvh10 + gvh15 + gvh20 + gvh25 ,
                  data = landmarkw, method = "breslow")
cox_land
```



## SAS
```{sas}
#| label: table-5.23-sas
#| eval: false 
#| output: false
data cov1;
	anc05=0; anc1=0; anc15=0; anc2=0; anc25=0; 
	gvh05=0; gvh1=0; gvh15=0; gvh2=0; gvh25=0;
run;
proc phreg data=landmark covs(aggregate);
	class landmark;
	model time*status(0)=anc05 anc1 anc15 anc2 anc25 
	                     gvh05 gvh1 gvh15 gvh2 gvh25/entry=entry;
	anc05=anc*(landmark=0.5); gvh05=gvh*(landmark=0.5);
	anc1=anc*(landmark=1); gvh1=gvh*(landmark=1);
	anc15=anc*(landmark=1.5); gvh15=gvh*(landmark=1.5);
	anc2=anc*(landmark=2); gvh2=gvh*(landmark=2);
	anc25=anc*(landmark=2.5); gvh25=gvh*(landmark=2.5);
	strata landmark;
	id id;
	baseline out=base1 covariates=cov1 survival=km0;
run;

                                      The PHREG Procedure

                              Analysis of Maximum Likelihood Estimates

                        Parameter      Standard    StdErr                                  Hazard
    Parameter    DF      Estimate         Error     Ratio    Chi-Square    Pr > ChiSq       Ratio

    anc05         1      -0.33460       0.10680     1.000        9.8154        0.0017       0.716
    anc1          1      -0.60851       0.31981     1.044        3.6202        0.0571       0.544
    anc15         1      -1.68550       0.61040     1.211        7.6249        0.0058       0.185
    anc2          1      -2.96384       0.40406     0.562       53.8052        <.0001       0.052
    anc25         1      -3.35448       0.17843     0.176      353.4208        <.0001       0.035
    gvh05         1       0.70277       0.14894     1.010       22.2637        <.0001       2.019
    gvh1          1       0.67945       0.11523     1.003       34.7695        <.0001       1.973
    gvh15         1       0.86339       0.11254     1.001       58.8574        <.0001       2.371
    gvh2          1       0.80243       0.11511     1.000       48.5926        <.0001       2.231
    gvh25         1       0.83065       0.12129     0.998       46.8981        <.0001       2.295
```


:::

### Figure 5.1

::: {.panel-tabset}

## R


```{r}
#| label: figure-5.1-r
#| out-width: 90%

# General theme
library(ggplot2)
theme_general <- theme_bw() +
  theme(legend.position = "bottom",
        text = element_text(size = 26),
        axis.text.x = element_text(size = 26),
        axis.text.y = element_text(size = 26),
        legend.text = element_text(size = 26))

# Extract estimated survival probabilities
surv <- survfit(cox_land,
                newdata = data.frame(anc05 = 0, anc10 = 0, anc15 = 0, anc20 = 0, anc25 = 0,
                                     gvh05 = 0, gvh10 = 0, gvh15 = 0, gvh20 = 0, gvh25 = 0))

# Order data for plotting
pdata <- data.frame(surv = surv$surv,
                    time = surv$time,
                    landmark = c(rep("0.5", surv$strata[[1]]),
                                 rep("1.0", surv$strata[[2]]),
                                 rep("1.5", surv$strata[[3]]),
                                 rep("2.0", surv$strata[[4]]),
                                 rep("2.5", surv$strata[[5]]))
)

# Add prob 1 in beginning for all
pdata2 <- as.data.frame(pdata %>% group_by(landmark) %>%
  group_modify(~ add_row(.x, surv = 1, time = 0, .before=0)))


# Create Figure (a)
fig5.1a <- ggplot(aes(x = time, y = surv, linetype = landmark), data = pdata2) +
  geom_step(size = 1) +
  scale_linetype_discrete("Landmark") +
  xlab("Time since bone marrow transplantation (months)") +
  ylab("Conditional survival probability") +
  scale_x_continuous(expand = expansion(mult = c(0.001, 0.05)),
                     limits = c(0, 9),
                     breaks = seq(0, 9, 1)) +
  scale_y_continuous(expand = expansion(mult = c(0.001, 0.05)),
                     limits = c(0, 1.0),
                     breaks = seq(0, 1.0, 0.1)) +
  theme_general +
  theme(legend.key.size = unit(1.5, 'cm')) +
  guides(linetype = guide_legend(nrow = 1, byrow = TRUE))

fig5.1a

# For anc = gvh = 1
# Add LP to data
pdata2$lp <- with(pdata2,
                  ifelse(landmark == '0.5', coef(cox_land)[1] + coef(cox_land)[6],
                    ifelse(landmark == '1.0', coef(cox_land)[2] + coef(cox_land)[7],
                      ifelse(landmark == '1.5', coef(cox_land)[3] + coef(cox_land)[8],
                        ifelse(landmark == '2.0', coef(cox_land)[4] + coef(cox_land)[9],
                          ifelse(landmark == '2.5', coef(cox_land)[5] + coef(cox_land)[10],
                    0))))))

pdata2_wc <- pdata2
pdata2_wc$survlp <- with(pdata2, surv ^ exp(lp))


# Create Figure 5.1 (b)
fig5.1b <- ggplot(aes(x = time, y = survlp, linetype = landmark), data = pdata2_wc) +
  geom_step(size = 1) +
  scale_linetype_discrete("Landmark") +
  xlab("Time since bone marrow transplantation (months)") +
  ylab("Conditional survival probability") +
  scale_x_continuous(expand = expansion(mult = c(0.001, 0.05)),
                     limits = c(0, 9),
                     breaks = seq(0, 9, 1)) +
  scale_y_continuous(expand = expansion(mult = c(0.001, 0.05)),
                     limits = c(0, 1.0),
                     breaks = seq(0, 1.0, 0.1)) +
  theme_general +
  theme(legend.key.size = unit(1.5, 'cm')) +
  guides(linetype = guide_legend(nrow = 1, byrow = TRUE))

fig5.1b
```


## SAS
```{sas}
#| label: figure-5.1-sas
#| eval: false 
#| output: false
title 'Figure 5.1 (a)';
proc gplot data=base1;
	plot km0*time=landmark/haxis=axis1 vaxis=axis2;
	axis1 order=0 to 9 by 1 minor=none label=('Months');
	axis2 order=0 to 1 by 0.1 minor=none 
	label=(a=90 'Conditional survival probability');
	symbol1  v=none i=stepjl c=blue;
	symbol2  v=none i=stepjl c=red;
	symbol3  v=none i=stepjl c=black;
	symbol4 v=none i=stepjl c=green;
	symbol5 v=none i=stepjl c=orange;
run;
quit;

data base1; set base1;
	if landmark=0.5 then km1=km0**exp(-0.33460+0.70277);
	if landmark=1 then km1=km0**exp(-0.60851+0.67945);
	if landmark=1.5 then km1=km0**exp(-1.68550+0.86339);
	if landmark=2 then km1=km0**exp(-2.96384+0.80243);
	if landmark=2.5 then km1=km0**exp(-3.35448+0.83065);
run;

title 'Figure 5.1 (b)';
proc gplot data=base1;
	plot km1*time=landmark/haxis=axis1 vaxis=axis2;
	axis1 order=0 to 9 by 1 minor=none label=('Months');
	axis2 order=0 to 1 by 0.1 minor=none 
	label=(a=90 'Conditional survival probability');
	symbol1  v=none i=stepjl c=blue;
	symbol2  v=none i=stepjl c=red;
	symbol3  v=none i=stepjl c=black;
	symbol4 v=none i=stepjl c=green;
	symbol5 v=none i=stepjl c=orange;
run;
quit;
```
:::

### Table 5.3

::: {.panel-tabset}

## R


```{r}
#| label: table-5.3-r

## COLUMN 1 
# Add extra variables
landmarkw2 <- landmark %>%
  mutate(anctime  = anc * (landmark - 0.5)/2,
         anctime2 = anc * ((landmark - 0.5)/2)^2,
         gvhtime  = gvh * (landmark - 0.5)/2,
         gvhtime2 = gvh * ((landmark - 0.5)/2)^2
        )

# Fit model
cox_land2 <- coxph(Surv(entry, time, status != 0) ~ cluster(id) + strata(landmark) +
                    anc + anctime + anctime2 +
                    gvh + gvhtime + gvhtime2,
                  data = landmarkw2,
                  method = "breslow", timefix = FALSE, eps = 1e-9)
summary(cox_land2)


## COLUMN 2


# Add extra variables
landmarkw3 <- landmarkw2 %>%
  mutate(strtime = (landmark - 0.5)/2,
         strtime2 = strtime^2
  )

# Fit model
cox_land3 <- coxph(Surv(entry, time, status != 0) ~ cluster(id) +
                     anc + anctime + anctime2 +
                     gvh + gvhtime + gvhtime2 +
                     strtime + strtime2,
                   data = landmarkw3,
                   method = "breslow")
summary(cox_land3)
```


## SAS
```{sas}
#| label: table-5.3-sas
#| eval: false 
#| output: false
data cov2;
	anc=0; anctime=0; anctime2=0;  
	gvh=0; gvhtime=0; gvhtime2=0; 
run;
proc phreg data=landmark covs(aggregate);
	model time*status(0)=anc anctime anctime2 
	                     gvh gvhtime gvhtime2/entry=entry;
	anctime=anc*(landmark-0.5)/2; anctime2=anc*((landmark-0.5)/2)**2;
	gvhtime=gvh*(landmark-0.5)/2; gvhtime2=gvh*((landmark-0.5)/2)**2;
	strata landmark;
	id id;
	baseline out=base2 covariates=cov2 survival=km0;
run;
	                   
* Column 2; 
data cov3;
	anc=0; anctime=0; anctime2=0; 
	gvh=0; gvhtime=0; gvhtime2=0;
	strtime=0; strtime2=0;
run;
proc phreg data=landmark covs(aggregate);
	model time*status(0)=anc anctime anctime2 
	                     gvh gvhtime gvhtime2
	                     strtime strtime2/entry=entry;
	anctime=anc*(landmark-0.5)/2; anctime2=anc*((landmark-0.5)/2)**2;
	gvhtime=gvh*(landmark-0.5)/2; gvhtime2=gvh*((landmark-0.5)/2)**2;
	strtime=(landmark-0.5)/2; strtime2=strtime**2;
	id id;
	baseline out=base3 covariates=cov3 survival=km;
run;
```
:::

### Figure 5.2

::: {.panel-tabset}

## R


```{r}
#| label: figure-5.2-r
#| out-width: 90%

# Extract estimated survival probabilities
surv <- survfit(cox_land2,
                newdata = data.frame(anc = 0, anctime = 0, anctime2 = 0,
                                     gvh = 0, gvhtime = 0, gvhtime2 = 0))

# Order data for plotting
pdata <- data.frame(surv = surv$surv,
                    time = surv$time,
                    landmark = c(rep("0.5", surv$strata[[1]]),
                                 rep("1.0", surv$strata[[2]]),
                                 rep("1.5", surv$strata[[3]]),
                                 rep("2.0", surv$strata[[4]]),
                                 rep("2.5", surv$strata[[5]]))
)

# Add prob 1 in beginning for all
pdata2 <- as.data.frame(pdata %>% group_by(landmark) %>%
                          group_modify(~ add_row(.x, surv = 1, time = 0, .before=0)))


# Create Figure (a)
fig5.2a <- ggplot(aes(x = time, y = surv, linetype = landmark), data = pdata2) +
  geom_step(size = 1) +
  scale_linetype_discrete("Landmark") +
  xlab("Time since bone marrow transplantation (months)") +
  ylab("Conditional survival probability") +
  scale_x_continuous(expand = expansion(mult = c(0.001, 0.05)),
                     limits = c(0, 9),
                     breaks = seq(0, 9, 1)) +
  scale_y_continuous(expand = expansion(mult = c(0.001, 0.05)),
                     limits = c(0, 1.0),
                     breaks = seq(0, 1.0, 0.1)) +
  theme_general +
  theme(legend.key.size = unit(1.5, 'cm')) +
  guides(linetype = guide_legend(nrow = 1, byrow = TRUE))

fig5.2a


# For anc = gvh = 1
# Add LP to data
pdata2$landmarknum <- as.numeric(pdata2$landmark)
pdata2$lp <- with(pdata2,
                  coef(cox_land2)[1] +
                    coef(cox_land2)[2] * (landmarknum - 0.5) / 2 +
                     coef(cox_land2)[3] * ((landmarknum - 0.5) / 2)^2 +
                      coef(cox_land2)[4] +
                       coef(cox_land2)[5] * (landmarknum - 0.5) / 2 +
                        coef(cox_land2)[6] * ((landmarknum - 0.5) / 2)^2
                        )



pdata2_wc <- pdata2
pdata2_wc$survlp <- with(pdata2, surv ^ exp(lp))


# Create Figure (b)
fig5.2b <- ggplot(aes(x = time, y = survlp, linetype = landmark), data = pdata2_wc) +
  geom_step(size = 1) +
  scale_linetype_discrete("Landmark") +
  xlab("Time since bone marrow transplantation (months)") +
  ylab("Conditional survival probability") +
  scale_x_continuous(expand = expansion(mult = c(0.001, 0.05)),
                     limits = c(0, 9),
                     breaks = seq(0, 9, 1)) +
  scale_y_continuous(expand = expansion(mult = c(0.001, 0.05)),
                     limits = c(0, 1.0),
                     breaks = seq(0, 1.0, 0.1)) +
  theme_general +
  theme(legend.key.size = unit(1.5, 'cm')) +
  guides(linetype = guide_legend(nrow = 1, byrow = TRUE))

fig5.2b
```


## SAS
```{sas}
#| label: figure-5.2-sas
#| eval: false 
#| output: false
proc gplot data=base2;
	plot km0*time=landmark/haxis=axis1 vaxis=axis2;
	axis1 order=0 to 9 by 1 minor=none label=('Months');
	axis2 order=0 to 1 by 0.1 minor=none 
	label=(a=90 'Conditional survival probability');
	symbol1  v=none i=stepjl c=blue;
	symbol2  v=none i=stepjl c=red;
	symbol3  v=none i=stepjl c=black;
	symbol4 v=none i=stepjl c=green;
	symbol5 v=none i=stepjl c=orange;
run;
quit;

data base2;
	set base2;
	lp=-0.32202+(-1.19065)*(landmark-0.5)/2
	+(-2.25731)*((landmark-0.5)/2)**2
	+0.66257+0.39131*(landmark-0.5)/2+(-0.22640)*((landmark-0.5)/2)**2;
	km1=km0**exp(lp);
run;

proc gplot data=base2;
	plot km1*time=landmark/haxis=axis1 vaxis=axis2;
	axis1 order=0 to 9 by 1 minor=none label=('Months');
	axis2 order=0 to 1 by 0.1 minor=none 
	label=(a=90 'Conditional survival probability');
	symbol1  v=none i=stepjl c=blue;
	symbol2  v=none i=stepjl c=red;
	symbol3  v=none i=stepjl c=black;
	symbol4 v=none i=stepjl c=green;
	symbol5 v=none i=stepjl c=orange;
run;
quit;
```
:::

### Figure 5.3

::: {.panel-tabset}

## R


```{r}
#| label: figure-5.3-r
#| out-width: 90%

# Extract estimated survival probabilities
surv <- survfit(cox_land3,
                newdata = data.frame(anc = 0, anctime = 0, anctime2 = 0,
                                     gvh = 0, gvhtime = 0, gvhtime2 = 0 ,
                                     strtime = 0, strtime2 = 0))

# Order data for plotting
pdata <- data.frame(surv = surv$surv,
                    time = surv$time)

require(dplyr)
base305 <- pdata %>% filter(time < 6.5) %>% 
  mutate(landmark = 0.5,
         km0 = surv, 
         lpt = 0,
         lpz = coef(cox_land3)[1] + coef(cox_land3)[4],
         km1 = km0^exp(lpz))


base310 <- pdata %>% filter(time > 1 & time < 7) %>%  
  mutate(landmark = 1,
         lpt = coef(cox_land3)[7] * 0.5 / 2 + coef(cox_land3)[8] * (0.5 / 2)^2,
         km0 = (surv / 0.9784098)^exp(lpt), 
         lpz = coef(cox_land3)[1] + coef(cox_land3)[4] + 
           coef(cox_land3)[2] * 0.5 / 2 + 
           coef(cox_land3)[5] * 0.5 / 2 +
           coef(cox_land3)[3] * (0.5 / 2)^2 + 
           coef(cox_land3)[6] * (0.5 / 2)^2 ,
         km1 = km0^exp(lpz))


base315 <- pdata %>% filter(time > 1.5 & time < 7.5) %>%  
  mutate(landmark = 1.5,
         lpt = coef(cox_land3)[7] * 1 / 2 + coef(cox_land3)[8] * (1 / 2)^2,
         km0 = (surv / 0.9554490)^exp(lpt), 
         lpz = coef(cox_land3)[1] + coef(cox_land3)[4] + 
           coef(cox_land3)[2] * 1 / 2 + 
           coef(cox_land3)[5] * 1 / 2 +
           coef(cox_land3)[3] * (1 / 2)^2 + 
           coef(cox_land3)[6] * (1 / 2)^2 ,
         km1 = km0^exp(lpz))

base320 <- pdata %>% filter(time > 2 & time < 8) %>%  
  mutate(landmark = 2,
         lpt = coef(cox_land3)[7] * 1.5 / 2 + coef(cox_land3)[8] * (1.5 / 2)^2,
         km0 = (surv / 0.9395795)^exp(lpt), 
         lpz = coef(cox_land3)[1] + coef(cox_land3)[4] + 
           coef(cox_land3)[2] * 1.5 / 2 + 
           coef(cox_land3)[5] * 1.5 / 2 +
           coef(cox_land3)[3] * (1.5 / 2)^2 + 
           coef(cox_land3)[6] * (1.5 / 2)^2 ,
         km1 = km0^exp(lpz))

base325 <- pdata %>% filter(time > 2.5 & time < 8.5) %>%  
  mutate(landmark = 2.5,
         lpt = coef(cox_land3)[7] * 2 / 2 + coef(cox_land3)[8] * (2 / 2)^2,
         km0 = (surv / 0.9126288)^exp(lpt), 
         lpz = coef(cox_land3)[1] + coef(cox_land3)[4] + 
           coef(cox_land3)[2] * 2 / 2 + 
           coef(cox_land3)[5] * 2 / 2 +
           coef(cox_land3)[3] * (2 / 2)^2 + 
           coef(cox_land3)[6] * (2 / 2)^2 ,
         km1 = km0^exp(lpz))
base3slut <- as.data.frame(rbind(base305, base310, base315, base320, base325))


# Add prob 1 in beginning for all
pdata3 <- as.data.frame(base3slut %>% group_by(landmark) %>%
                           group_modify(~ add_row(.x, km0 = 1, km1  = 1, time = 0, .before=0)))

# Create Figure (a)
fig5.3a <- ggplot(aes(x = time, y = km0, linetype = as.factor(landmark)), data = pdata3) +
  geom_step(size = 1) +
  scale_linetype_discrete("Landmark",labels=c("0.5","1.0","1.5", "2.0","2.5")) +
  xlab("Time since bone marrow transplantation (months)") +
  ylab("Conditional survival probability") +
  scale_x_continuous(expand = expansion(mult = c(0.001, 0.05)),
                     limits = c(0, 9),
                     breaks = seq(0, 9, 1)) +
  scale_y_continuous(expand = expansion(mult = c(0.001, 0.05)),
                     limits = c(0, 1.0),
                     breaks = seq(0, 1.0, 0.1)) +
  theme_general +
  theme(legend.key.size = unit(1.5, 'cm')) + 
  guides(linetype = guide_legend(nrow = 1, byrow = TRUE))

fig5.3a


# Create Figure 5.3 (right)
fig5.3b <- ggplot(aes(x = time, y = km1, linetype = as.factor(landmark)), data = pdata3) +
  geom_step(size = 1) +
  scale_linetype_discrete("Landmark",labels=c("0.5","1.0","1.5", "2.0","2.5")) +
  xlab("Time since bone marrow transplantation (months)") +
  ylab("Conditional survival probability") +
  scale_x_continuous(expand = expansion(mult = c(0.001, 0.05)),
                     limits = c(0, 9),
                     breaks = seq(0, 9, 1)) +
  scale_y_continuous(expand = expansion(mult = c(0.001, 0.05)),
                     limits = c(0, 1.0),
                     breaks = seq(0, 1.0, 0.1)) +
   theme_general +
   theme(legend.key.size = unit(1.5, 'cm'))  +
  guides(linetype = guide_legend(nrow = 1, byrow = TRUE))

fig5.3b
```


## SAS
```{sas}
#| label: figure-5.3-sas
#| eval: false 
#| output: false
proc freq; 
	tables gvhtime * gvhtime2; 
run;

data base305; set base3;
	landmark=0.5;
	km0=km; 
	lpz=-0.29798+0.67374;
	km1=km0**exp(lpz);
	if time<6.5 then output;
run;


data base31; set base3;
	landmark=1;
	if time>1 then do;
	lpt=1.41386*0.5/2+1.94038*0.5*0.5/4;
	km0=(km/0.9784097802)**exp(lpt);
	lpz=-0.29798+0.67374+(-1.39310)*0.5/2+(-2.03750)/4*0.5*0.5
	   +0.33291*0.5/2+(-0.17548)/4*0.5*0.5; 
	km1=km0**exp(lpz);
	if time<7 then output;
	end;
run;

data base315; set base3;
	landmark=1.5;
	if time>1.5 then do;
	lpt=1.41386*1/2+1.94038*1*1/4;
	km0=(km/0.9554490221)**exp(lpt);
	lpz=-0.29798+0.67374+(-1.39310)*1/2+(-2.03750)/4*1*1
	   +0.33291*1/2+(-0.17548)/4*1*1;
	km1=km0**exp(lpz);
	if time<7.5 then output;
	end;
run;

data base32; set base3;
	landmark=2;
	if time>2 then do;
	lpt=1.41386*1.5/2+1.94038*1.5*1.5/4;
	km0=(km/0.9395794634)**exp(lpt);
	lpz=-0.29798+0.67374+(-1.39310)*1.5/2+(-2.03750)/4*1.5*1.5
	   +0.33291*1.5/2+(-0.17548)/4*1.5*1.5;
	km1=km0**exp(lpz);
	if time<8 then output;
	end;
run;


data base325; set base3;
	landmark=2.5;
	if time>=2.5 then do;
	lpt=1.41386*2/2+1.94038*2*2/4;
	km0=(km/0.9142153063)**exp(lpt);
	lpz=-0.29798+0.67374+(-1.39310)*2/2+(-2.03750)/4*2*2
	   +0.33291*2/2+(-0.17548)/4*2*2;
	km1=km0**exp(lpz);
	if time<8.5 then output;
	end;
run;

data base3slut; 
	set base305 base31 base315 base32 base325;
run;

proc gplot data=base3slut;
	plot km0*time=landmark/haxis=axis1 vaxis=axis2;
	axis1 order=0 to 9 by 1 minor=none label=('Months');
	axis2 order=0 to 1 by 0.1 minor=none 
	label=(a=90 'Conditional survival probability');
	symbol1  v=none i=stepjl c=blue;
	symbol2  v=none i=stepjl c=red;
	symbol3  v=none i=stepjl c=black;
	symbol4 v=none i=stepjl c=green;
	symbol5 v=none i=stepjl c=orange;
run; 
quit;

proc gplot data=base3slut;
	plot km1*time=landmark/haxis=axis1 vaxis=axis2;
	axis1 order=0 to 9 by 1 minor=none label=('Months');
	axis2 order=0 to 1 by 0.1 minor=none 
	label=(a=90 'Conditional survival probability');
	symbol1  v=none i=stepjl c=blue;
	symbol2  v=none i=stepjl c=red;
	symbol3  v=none i=stepjl c=black;
	symbol4 v=none i=stepjl c=green;
	symbol5 v=none i=stepjl c=orange;
run; 
quit;
```
:::

### Table 5.5

::: {.panel-tabset}

## R
```{r}
#| label: table-5.5-r

library(survival)
library(mstate)
library(tidyverse) #Mostly for ggplot2
library(ggpubr) #Extra functions to ggplot2
library(xtable) #Converts table to LaTeX code
library(data.table) #Faster than data.frame
library(compiler) #Improves speed of functions a tiny bit
library(gridExtra) #Graphics

# General theme
theme_general <- theme_bw() +
  theme(legend.position = "bottom",
        text = element_text(size = 22),
        axis.text.x = element_text(size = 22),
        axis.text.y = element_text(size = 22),
        legend.text = element_text(size = 22))

# DATA PREPARATIONS ########################################################## 

# Read data
bmt <- read.csv("data/bmt.csv")
bmt <- bmt %>% mutate(outof0 = ifelse(gvhd == 1 | rel == 1 | death == 1, 1, 0),
                      outof0and1 = ifelse(rel == 1 | death == 1, 1,0),
                      dead = death,
                      timerel = ifelse(rel == 1, timerel, timedeath),
                      timegvhd = ifelse(gvhd ==1, timegvhd, timerel),
                      wait2 = timedeath - timerel,
                      intxsurv = timedeath,
                      intxrel = timerel,
                      tgvhd = timegvhd,)

# PREPARATIONS FOR AALEN-JOHANSEN & LANDMARK AALEN-JOHANSEN ##################

#Transition matrix
tmat <- matrix(NA, 4,4)
tmat[1,2:4] <- 1:3
tmat[2,3:4] <- 4:5
tmat[3, 4] <- 6
dimnames(tmat) <- list(from = c("BMT", "GvHD", "Relapse", "Dead"), to = c("BMT", "GvHD", "Relapse", "Dead"))
#tmat

#Creating data in long format, i.e. row for every transition
long_format <- msprep(time = c(NA, "tgvhd", "intxrel", "intxsurv"), status = c(NA,"gvhd", "rel", "dead"), data = as.data.frame(bmt), trans = tmat)
#Warning is due to 4 observations where time of relapse and death are the same.

#Cox model - no covariates, only strata
cox_base <- coxph(Surv(Tstart, Tstop, status) ~ strata(trans), data = long_format, method = "breslow")
#Warning due to start time being equal to stop time for some of the observations

#Subject specific transition hazards
msfit <- msfit(cox_base, trans = tmat)
#Warning due to the same as above


# S = 3 #######################################################################

#Aalen-Johansen
AJ3 <- probtrans(msfit, predt = 3, direction = "forward", method = "aalen")[[1]]
AJ3_data <- as.data.frame(cbind(AJ3$time, AJ3$pstate3))
colnames(AJ3_data) <- c("time", "p02")

AJ3_max60 <- subset(AJ3, time <= 60)


#Landmark Aalen-Johansen
LMAJ3 <- LMAJ(long_format, s = 3, from = 1, method = "aalen") #Same warning as before
LMAJ3_data <- as.data.frame(cbind(LMAJ3$time, LMAJ3$pstate3))
colnames(LMAJ3_data) <- c("time", "p02")

LMAJ3_max60 <- subset(LMAJ3, time <= 60)

# S = 9 #######################################################################

#Aalen-Johansen
AJ9 <- probtrans(msfit, predt = 9, direction = "forward", method = "aalen")[[1]]
AJ9_data <- as.data.frame(cbind(AJ9$time, AJ9$pstate3))
colnames(AJ9_data) <- c("time", "p02")

AJ9_max60 <- subset(AJ9, time <= 60)

#Landmark Aalen-Johansen
LMAJ9 <- LMAJ(long_format, s = 9, from = 1, method = "aalen")
LMAJ9_data <- as.data.frame(cbind(LMAJ9$time, LMAJ9$pstate3))
colnames(LMAJ9_data) <- c("time", "p02")

LMAJ9_max60 <- subset(LMAJ9, time <= 60)

# PREPARATIONS FOR SEMI-MARKOV AND PLUG-IN ESTIMATORS #########################

#Transforming data to data.table for faster speed
bmt_dt <- setDT(bmt)

#Number of patients in state 0 at x, Y0(x)
patients_in_0 <- function(x){
  return(nrow(bmt_dt[tgvhd > (x - 0.000001)]))}

#Number of patients in state 1 at x, Y1(x)
patients_in_1 <- function(x){
  return(nrow(bmt_dt[gvhd ==1 & tgvhd < x & intxrel > (x - 0.000001)]))}

#Number of patients in state 2 at x, Y2(x)
patients_in_2 <- function(x){
  return(nrow(bmt_dt[rel ==1 & intxrel < x & intxsurv > (x - 0.000001)]))}

#alpha01 = dN01(u)/Y0(u)
alpha01 <- function(u){ 
  dN01 <- nrow(bmt_dt[tgvhd == u & gvhd == 1])
  Y0 <- patients_in_0(u)
  return(dN01/Y0)}

#alpha02 = dN02(u)/Y0(u)
alpha02 <- function(u){ 
  dN02 <- nrow(bmt_dt[gvhd == 0 & rel ==1 & intxrel == u])
  Y0 <- patients_in_0(u)
  return(dN02/Y0)}

#alpha12 = dN12(u)/Y1(u)
alpha12 <- function(u){ 
  dN12 <- nrow(bmt_dt[gvhd == 1 & rel ==1 & intxrel == u])
  Y1 <- patients_in_1(u)
  return(dN12/Y1)}

#P_00(s,u -) = \Pi_{u \in (s,t]} (1 - dN0(u)/Y0(u))
p00 <- function(start, end){
  exits <- bmt_dt[outof0 == 1 & tgvhd > start & tgvhd <= (end - 0.000001)]$tgvhd #Exits from state 0 in (s,t]
  if (length(exits) == 0){prob <- 1}
  else{
    exits_unique <- data.frame(table(exits))
    Y0 <- sapply(as.numeric(as.character(exits_unique$exits)), patients_in_0)
    frac <- (1 - exits_unique$Freq/Y0)
    prob <- prod(frac)}
  return(prob)}

#P_11(s,u-) = \Pi_{u \in (s,t]} (1 - dN1(u)/Y1(u))
p11 <- function(start,end){
  exits <- bmt_dt[gvhd ==1 & intxrel <= (end- 0.000001) & intxrel > start & (rel ==1 | dead ==1)]$intxrel #Time of exits from state 1 in (start, end)
  if (length(exits) == 0){prob <- 1}
  else {
    exits_unique <- data.frame(table(exits))
    Y1 <- sapply(as.numeric(as.character(exits_unique$exits)), patients_in_1)
    frac <- (1 - exits_unique$Freq/Y1)
    prob <- prod(frac)}
  return(prob)}

#Times of 0 -> 1 transitions
time01 <- sort(unique(bmt_dt[gvhd == 1]$tgvhd))

#Times of 1 -> 2 transitions
time12 <- sort(unique(bmt_dt[gvhd ==1 & rel == 1]$intxrel)) 

# -----------------------------------------------------------------------------
# FOR REPRODUCING THE TABLE p11alpha12. Takes approximately 10 minutes

#p11alpha12_table_raw <- matrix(NA, nrow = length(time01), ncol = length(time12))
#colnames(p11alpha12_table_raw) <- time12
#rownames(p11alpha12_table_raw) <- time01
#for (i in 1:length(time01)){
#  for (j in 1:length(time12)){
#    if (time01[i] > time12[j]){p11alpha12_table_raw[i,j] <- NA}
#    else {p11alpha12_table_raw[i,j] <- p11(time01[i],time12[j])*alpha12(time12[j])}}}
#p11alpha12_table <- as.data.table(p11alpha12_table_raw, keep.rownames = TRUE)

# -----------------------------------------------------------------------------

# Data.table of P11(u,x-)alpha12(x)
p11alpha12_table <- read.csv("temp/p11alpha12tabel.csv")
colnames(p11alpha12_table) <- c("rn",time12)
p11alpha12_table <- as.data.table(p11alpha12_table)

#P_11(u,x-)alpha12(x)
p11alpha12 <- function(start,end){
  start_point <- length(time01[time01 <= start])
  end_point <- length(time12[time12 <= end]) +1
  return(as.numeric(p11alpha12_table[start_point,end_point, with = FALSE]))}

#Compilation of functions for tiny increase in speed performance
alpha01 <- cmpfun(alpha01)
alpha02 <- cmpfun(alpha02)
alpha12 <- cmpfun(alpha12)
patients_in_0 <- cmpfun(patients_in_0)
patients_in_1 <- cmpfun(patients_in_1)
patients_in_2 <- cmpfun(patients_in_2)
p11alpha12 <- cmpfun(p11alpha12)

# S = 3 #######################################################################

#Time of 0 -> 1 transitions for u > 3
time01_s3 <- sort(unique(bmt_dt[tgvhd > 3 & gvhd == 1]$tgvhd))

#Time of 0 -> 2 transitions for u > 3  
time02_s3 <- sort(unique(bmt_dt[gvhd == 0 & rel == 1 & intxrel > 3]$intxrel))

#Matrix where 1st column is times for 0 -> 1 transition, u,
#and 4th column is P00(3,u -)*alpha01(u)
p00alpha01_s3 <- matrix(NA, nrow = length(time01_s3), ncol = 4)
p00alpha01_s3[, 1] <- time01_s3 #u, times of 0->1 transitions after 3 months
p00alpha01_s3[, 2] <- sapply(p00alpha01_s3[,1], p00, start = 3) #P00(3,u -)
p00alpha01_s3[, 3] <- sapply(p00alpha01_s3[,1], alpha01) #alpha01(u)
p00alpha01_s3[, 4] <- p00alpha01_s3[,2]*p00alpha01_s3[,3] #P00(3,u -)*alpha01(u)

#Matrix where 1st column is times for 0 -> 2 transition, u,
#and 4th column is P00(3,u -)*alpha02(u)
p00alpha02_s3 <- matrix(NA, nrow = length(time02_s3), ncol = 4)
p00alpha02_s3[, 1] <- time02_s3 #u, times of 0->2 transitions after 3 months
p00alpha02_s3[, 2] <- sapply(p00alpha02_s3[,1], p00, start = 3) #P00(3,u -)
p00alpha02_s3[, 3] <- sapply(p00alpha02_s3[,1], alpha02) #alpha02(u) 
p00alpha02_s3[, 4] <- p00alpha02_s3[,2]*p00alpha02_s3[,3] #P00(3,u -)*alpha(u)

# S = 9 #######################################################################

#Time of 0 -> 1 transitions for u > 9
time01_s9 <- sort(unique(bmt_dt[tgvhd > 9 & gvhd == 1]$tgvhd))

#Time of 0 -> 2 transitions for u > 9
time02_s9 <- sort(unique(bmt_dt[gvhd == 0 & rel == 1 & intxrel > 9]$intxrel))

#Matrix where 1st column is times for 0 -> 1 transition, u,
#and 4th column is P00(6,u -)*alpha01(u)
p00alpha01_s9 <- matrix(NA, nrow = length(time01_s9), ncol = 4)
p00alpha01_s9[, 1] <- time01_s9 #u, times of 0->1 transitions after 9 months
p00alpha01_s9[, 2] <- sapply(p00alpha01_s9[,1], p00, start = 9) #P00(9,u -)
p00alpha01_s9[, 3] <- sapply(p00alpha01_s9[,1], alpha01) #alpha01(u)
p00alpha01_s9[, 4] <- p00alpha01_s9[,2]*p00alpha01_s9[,3] #P00(9,u -)*alpha01(u)

#Matrix where 1st column is times for 0 -> 2 transition, u,
#and 4th column is P00(9,u -)*alpha02(u)
p00alpha02_s9 <- matrix(NA, nrow = length(time02_s9), ncol = 4)
p00alpha02_s9[, 1] <- time02_s9 #u, times of 0->2 transitions after 9 months
p00alpha02_s9[, 2] <- sapply(p00alpha02_s9[,1], p00, start = 9) #P00(9,u -)
p00alpha02_s9[, 3] <- sapply(p00alpha02_s9[,1], alpha02) #alpha02(u) 
p00alpha02_s9[, 4] <- p00alpha02_s9[,2]*p00alpha02_s9[,3] #P00(9,u -)*alpha(u)


# SEMI-MARKOV #################################################################

#Kaplan-Meier for being in state 2 under semi-Markov assumption.
s2_semi <- survfit(Surv(wait2, dead) ~1, data = bmt_dt[rel ==1], type = "kaplan-meier") 
#Table containing time of observed durations in state 2, and estimates of S2_semi for each time.
s2_semi_table <- as.data.table(cbind(s2_semi$time, s2_semi$surv))

#P_22(s,t) = P_22(t-s) under semi-Markov assumption.
p22_semi <- function(start,end){
  duration <- end - start
  sub_tabel <- s2_semi_table[V1 <= duration]$V2
  p22 <- sub_tabel[length(sub_tabel)]
  return(p22)}

# S = 3 ####################################################################### 

#P_{0->2}(3,t) = \int_{3}^{t} P_00(3,u-)alpha02(u)P_22(u,t)
p02_direct_semi_s3 <- function(t){
  time <- p00alpha02_s3[, 1][p00alpha02_s3[, 1] <= t]
  if (length(time) == 0){prob02 <- 0}
  else{
    p00alpha2 <- p00alpha02_s3[, 4][p00alpha02_s3[, 1] <= t]
    p22 <- sapply(time, p22_semi, end = t)
    prob02 <- sum(p00alpha2*p22)}
  return(prob02)}

#P_{0->1->2}(3,t) = \int_{3}^{t} (P_00(3,u-)alpha01(u) \int_{u}^{t} (P_11(u,x-)alpha12(x)P_22(x,t)))
p02_non_direct_semi_s3 <- function(t){
  time <- p00alpha01_s3[, 1][p00alpha01_s3[, 1] <= t]
  if (length(time) == 0){prob02 <- 0}
  else{
    p00alpha1 <- p00alpha01_s3[, 4][p00alpha01_s3[, 1] <= t]
    p12 <- rep(0, length(time))
    possible_time12 <- time12[time12 < t]
    for (i in 1:length(time)){
      time12 <- possible_time12[possible_time12 > time[i]]
      if (length(time12) == 0){p12[i] <- 0}
      else{
        p11alpha2 <- vapply(time12, p11alpha12, start = time[i], numeric(1))
        p22 <- sapply(time12, p22_semi, end = t)
        p12[i] <- sum(p11alpha2*p22)}}
    prob02 <- sum(p00alpha1*p12)}
  return(prob02)}

#P_02(s,t) = P_{0->2}(s,t) + P_{0 -> 1 -> 2}(s,t)
p02_semi_s3 <- function(t){
  return(p02_direct_semi_s3(t) + p02_non_direct_semi_s3(t))}

# s = 9 #######################################################################

#P_{0->2}(9,t) = \int_{9}^{t} P_00(9,u-)alpha02(u)P_22(u,t)
p02_direct_semi_s9 <- function(t){
  time <- p00alpha02_s9[, 1][p00alpha02_s9[, 1] <= t]
  if (length(time) == 0){prob02 <- 0}
  else{
    p00alpha2 <- p00alpha02_s9[, 4][p00alpha02_s9[, 1] <= t]
    p22 <- sapply(time, p22_semi, end = t)
    prob02 <- sum(p00alpha2*p22)}
  return(prob02)}

#P_{0 -> 1 -> 2}(9,t) = \int_{9}^{t} (P_00(9,u-)alpha01(u) \int_{u}^{t} (P_11(u,x-)alpha12(x)P_22(x,t)))
p02_non_direct_semi_s9 <- function(t){
  time <- p00alpha01_s9[, 1][p00alpha01_s9[, 1] <= t]
  if (length(time) == 0){prob02 <- 0}
  else{
    p00alpha1 <- p00alpha01_s9[, 4][p00alpha01_s9[, 1] <= t]
    p12 <- rep(0, length(time))
    possible_time12 <- time12[time12 < t]
    for (i in 1:length(time)){
      time12 <- possible_time12[possible_time12 > time[i]]
      if (length(time12) == 0){p12[i] <- 0}
      else{
        p11alpha2 <- sapply(time12, p11alpha12, start = time[i])
        p22 <- sapply(time12, p22_semi, end = t)
        p12[i] <- sum(p11alpha2*p22)}}
    prob02 <- sum(p00alpha1*p12)}
  return(prob02)}

#P_02(s,t) = P_{0->2}(s,t) + P_{0 -> 1 -> 2}(s,t)
p02_semi_s9 <- function(t){
  return(p02_direct_semi_s9(t) + p02_non_direct_semi_s9(t))}

# Landmark Pepe ###############################################################

# s = 3 #######################################################################

#S_012, Kaplan-Meier for being in state 0,1 or 2 among patients in state 0 at time 3
Pepe_S012_s3 <- survfit(Surv(intxsurv, dead) ~1, data = bmt_dt[tgvhd > 3]) 
Pepe_S012_s3_table <- as.data.table(cbind(Pepe_S012_s3$time, Pepe_S012_s3$surv))
#S_01, Kaplen-Meier for being in state 0 or 1 among patients in state 0 at time 3
Pepe_S01_s3 <- survfit(Surv(intxrel, outof0and1)~1, data = bmt_dt[tgvhd > 3]) 
Pepe_S01_s3_table <- as.data.table(cbind(Pepe_S01_s3$time, Pepe_S01_s3$surv))

#S_012(t) - S_01(t) among subjects in state 0 at time 3
LMPepe_s3 <- function(t){ 
  S012t <- Pepe_S012_s3_table$V2[nrow(Pepe_S012_s3_table[V1 <= t])]
  S01t <- Pepe_S01_s3_table$V2[nrow(Pepe_S01_s3_table[V1 <= t])]
  if (length(S012t) == 0){S012t <- 1}
  if (length(S01t) == 0){S01t <-1}
  Pepe_est <- S012t - S01t
  return(Pepe_est)}

# s = 9 ######################################################################

#S_012, Kaplan-Meier for being in state 0,1 or 2 among patients in state 0 at time 9
Pepe_S012_s9 <- survfit(Surv(intxsurv, dead) ~1, data = bmt_dt[tgvhd > 9]) 
Pepe_S012_s9_table <- as.data.table(cbind(Pepe_S012_s9$time, Pepe_S012_s9$surv))
#S_01, Kaplan-Meier for being in state 0 or 1 among patients in state 0 at time 9
Pepe_S01_s9 <- survfit(Surv(intxrel, outof0and1)~1, data = bmt_dt[tgvhd > 9]) 
Pepe_S01_s9_table <- as.data.table(cbind(Pepe_S01_s9$time, Pepe_S01_s9$surv))

#S_012(t) - S_01(t) among subjects in state 0 at time 9
LMPepe_s9 <- function(t){ 
  S012t <- Pepe_S012_s9_table$V2[nrow(Pepe_S012_s9_table[V1 <= t])]
  S01t <- Pepe_S01_s9_table$V2[nrow(Pepe_S01_s9_table[V1 <= t])]
  if (length(S012t) == 0){S012t <- 1}
  if (length(S01t) == 0){S01t <-1}
  Pepe_est <- S012t - S01t
  return(Pepe_est)}

# PLUG-IN WITH DURATION OF GVHD AS LINEAR EFFECT ##############################

#Subset of data only containing subjects with GvHD = 1.
gvhd_subset <- subset(bmt, gvhd ==1)

#Cox model for alpha12 (GvHD -> Relapse) with a linear effect of duration in state 1 as covariate
cox_p12_tgvhd <- coxph(Surv(tgvhd, intxrel, rel) ~ tt(tgvhd), tt = function(x,t,...) t - x, data = gvhd_subset, method = "breslow") 
beta12 <- cox_p12_tgvhd$coefficients

#Baseline hazard for alpha12
basehaz12 <- function(t){
  dN12 <- nrow(bmt_dt[gvhd == 1 & rel == 1 & intxrel == t])
  Y1 <- bmt_dt[gvhd ==1 & tgvhd < t & intxrel > (t-0.0000001)]
  Y1beta <- sum(exp(beta12*(t - Y1$tgvhd)))
  base_alpha12 <- dN12/Y1beta
  return(base_alpha12)}
basehaz12_table <- as.data.table(cbind(time12,sapply(time12,basehaz12)))

#Hazard for alpha12 with linear effect of duration in GvHD after s.
haz12 <- function(s,x){
  if (x %in% time12){
    haz <- basehaz12_table[basehaz12_table$time12 == x]$V2*exp(beta12*(x-s))}
  else {haz <- 0}
  return(haz)}

#Time of 1 -> 3 transitions
time13 <- unique(sort(bmt_dt[gvhd ==1 & rel == 0 & dead == 1]$intxsurv))

#Cox model for alpha13 (GvHD -> Dead) with a linear effect of duration in state 1 as covariate
cox_p13_tgvhd <- coxph(Surv(tgvhd, intxsurv, dead) ~ tt(tgvhd), tt = function(x,t,...) t - x, data = gvhd_subset, method = "breslow") 
beta13 <- cox_p13_tgvhd$coefficients

#Baseline hazard for alpha13, dN13(x)/sum_i(Y_1i(x)*exp(beta(x-T01i)))
basehaz13 <- function(t){
  dN13 <- nrow(bmt_dt[gvhd == 1 & dead == 1 & rel == 0 & intxsurv == t])
  Y1 <- bmt_dt[gvhd ==1 & tgvhd < t & intxrel > (t-0.0000001)]
  Y1beta <- sum(exp(beta13*(t - Y1$tgvhd)))
  base_alpha13 <- dN13/Y1beta
  return(base_alpha13)}
basehaz13_table <- as.data.table(cbind(time13,sapply(time13,basehaz13)))

#Hazard for alpha12 with linear effect of duration in GvHD after s.
haz13 <- function(s,x){
  if (x %in% time13){
    haz <- basehaz13_table[basehaz13_table$time13 == x]$V2*exp(beta13*(x-s))}
  else {haz <- 0}
  return(haz)}

#P_11(s,t-) with linear effect of duration in state 1
p11_linear_gvhd <- function(start,end){
  if (start > (end - 0.000001)){p11 <- NA}
  else{
    time12_sub <- time12[start < time12 & time12 <= (end - 0.000001)]
    if (length(time12_sub) == 0){int12 <- 0}
    else {int12 <- sum(sapply(time12_sub, haz12, s = start))}
    time13_sub <- time13[start < time13 & time13 <= (end - 0.000001)]
    if (length(time13_sub) == 0){int13 <- 0}
    else{int13 <- sum(sapply(time13_sub, haz13, s = start))}
    p11 <- exp(-(int12+int13))}
  return(p11)}


# -----------------------------------------------------------------------------
# For reproducing data.table p11alpha12_linear_gvhd_table. Takes approximately 5 minutes 

# Table of p11alpha12 with linear effect of duration in state 1.
#p11alpha12_table_raw2 <- matrix(NA, nrow = length(time01), ncol = length(time12))
#colnames(p11alpha12_table_raw2) <- time12
#rownames(p11alpha12_table_raw2) <- time01
#for (i in 1:length(time01)){
#  for (j in 1:length(time12)){
#   if (time01[i] > time12[j]){p11alpha12_table_raw2[i,j] <- NA}
#    else {p11alpha12_table_raw2[i,j] <- p11_linear_gvhd(time01[i],time12[j])*haz12(s = time01[i], x = time12[j])}}}
#p11alpha12_linear_gvhd_table <- as.data.table(p11alpha12_table_raw2, keep.rownames = TRUE)
# -----------------------------------------------------------------------------


p11alpha12_linear_gvhd_table <- read.csv("temp/p11alpha12-linear-gvhd.csv")
colnames(p11alpha12_linear_gvhd_table) <- c("rn",time12)
p11alpha12_linear_gvhd_table <- as.data.table(p11alpha12_linear_gvhd_table)

#P_11(u,x-)alpha12(x) with linear effect of duration in state 1.
p11alpha12_lingvhd <- function(start,end){
  return(unlist(p11alpha12_linear_gvhd_table[(match(start,time01)), (match(end, time12) + 1), with = FALSE]))}

#S2 = \Pi_{u <= t} (1 - dN2(u)/Y2(u)), Kaplan-Meier
S2_markov <- function(t){
  exits <- bmt_dt[rel ==1 & dead ==1 & intxsurv <= t]$intxsurv
  if (length(exits) == 0) {prob <- 1}
  else{
    exits_unique <- data.frame(table(exits))
    Y2 <- vapply(as.numeric(as.character(exits_unique$exits)), patients_in_2, numeric(1))
    frac <- (1 - exits_unique$Freq/Y2)
    prob <- prod(frac)}
  return(prob)}

# -----------------------------------------------------------------------------
# For reproducing S2_markov_table. Takes approximately 10 minutes. 
#Data.table with 1st column times, t, and 2nd column S2_markov(t)
#times_for_S2_markov <- seq(0,149.34, by = 0.01)
#S2_markov_of_time <- sapply(times_for_S2_markov, S2_markov)
#S2_markov_table <- as.data.table(cbind(times_for_S2_markov, S2_markov_of_time))
# -----------------------------------------------------------------------------

s2_markov_table <- read.csv("temp/s2_table.csv")

#P22(u,t) = S2(t)/S2(u)
p22_markov <- function(start,end){
  s2_start <- s2_markov_table[start*100 + 1,2]
  s2_end <- s2_markov_table[end*100 + 1,2]
  return(as.numeric(s2_end/s2_start))}

# s = 3 #####################################################################
p02_direct_lingvhd_s3 <- function(t){
  time <- p00alpha02_s3[, 1][p00alpha02_s3[, 1] <= t]
  if (length(time) == 0){prob02 <- 0}
  else{
    p00alpha2 <- p00alpha02_s3[, 4][p00alpha02_s3[, 1] <= t]
    p22 <- sapply(time, p22_markov, end = t)
    prob02 <- sum(p00alpha2*p22)}
  return(prob02)}

#P_{0 -> 1 -> 2}(9,t) = \int_{9}^{t} (P_00(9,u-)alpha01(u) \int_{u}^{t} (P_11(u,x-)alpha12(x)P_22(x,t)))
p02_non_direct_lingvhd_s3 <- function(t){
  time <- p00alpha01_s3[, 1][p00alpha01_s3[, 1] <= t]
  if (length(time) == 0){prob02 <- 0}
  else{
    p00alpha1 <- p00alpha01_s3[, 4][p00alpha01_s3[, 1] <= t]
    p12 <- rep(0, length(time))
    possible_time12 <- time12[time12 < t]
    for (i in 1:length(time)){
      new_time12 <- possible_time12[possible_time12 > time[i]]
      if (length(new_time12) == 0){p12[i] <- 0}
      else{
        p11alpha2 <- sapply(new_time12, p11alpha12_lingvhd, start = time[i])
        p22 <- sapply(new_time12, p22_markov, end = t)
        p12[i] <- sum(p11alpha2*p22)}}
    prob02 <- sum(p00alpha1*p12)}
  return(prob02)}

#P_02(s,t) = P_{0->2}(s,t) + P_{0 -> 1 -> 2}(s,t)
p02_lingvhd_s3 <- function(t){
  return(p02_direct_lingvhd_s3(t) + p02_non_direct_lingvhd_s3(t))}

# s = 9 #####################################################################
p02_direct_lingvhd_s9 <- function(t){
  time <- p00alpha02_s9[, 1][p00alpha02_s9[, 1] <= t]
  if (length(time) == 0){prob02 <- 0}
  else{
    p00alpha2 <- p00alpha02_s9[, 4][p00alpha02_s9[, 1] <= t]
    p22 <- sapply(time, p22_markov, end = t)
    prob02 <- sum(p00alpha2*p22)}
  return(prob02)}

#P_{0 -> 1 -> 2}(9,t) = \int_{9}^{t} (P_00(9,u-)alpha01(u) \int_{u}^{t} (P_11(u,x-)alpha12(x)P_22(x,t)))
p02_non_direct_lingvhd_s9 <- function(t){
  time <- p00alpha01_s9[, 1][p00alpha01_s9[, 1] <= t]
  if (length(time) == 0){prob02 <- 0}
  else{
    p00alpha1 <- p00alpha01_s9[, 4][p00alpha01_s9[, 1] <= t]
    p12 <- rep(0, length(time))
    possible_time12 <- time12[time12 < t]
    for (i in 1:length(time)){
      new_time12 <- possible_time12[possible_time12 > time[i]]
      if (length(new_time12) == 0){p12[i] <- 0}
      else{
        p11alpha2 <- sapply(new_time12, p11alpha12_lingvhd, start = time[i])
        p22 <- sapply(new_time12, p22_markov, end = t)
        p12[i] <- sum(p11alpha2*p22)}}
    prob02 <- sum(p00alpha1*p12)}
  return(prob02)}

#P_02(s,t) = P_{0->2}(s,t) + P_{0 -> 1 -> 2}(s,t)
p02_lingvhd_s9 <- function(t){
  return(p02_direct_lingvhd_s9(t) + p02_non_direct_lingvhd_s9(t))}

# PLUG-IN WITH LINEAR EFFECT OF DURATION OF RELAPSE ###########################

rel_subset <- bmt_dt[rel == 1]

cox_23_linrel <- coxph(Surv(intxrel, intxsurv, dead) ~ tt(intxrel), tt = function(x,t,...) t - x, data = rel_subset, method = "breslow")
beta23 <- cox_23_linrel$coefficients

timej2 <- unique(sort(bmt_dt[rel ==1]$intxrel)) #Time of j -> 2 transitions, j = {0,1}
time23 <- unique(sort(bmt_dt[rel ==1 & dead ==1]$intxsurv)) #Time of 2 -> 3 transitions

#Baseline hazard for alpha23
basehaz23 <- function(t){
  dN23 <- nrow(bmt_dt[rel ==1 & dead == 1 & intxsurv == t])
  at_risk <- bmt_dt[rel == 1 & intxrel < t & intxsurv > (t - 0.000001)] 
  weigthed_at_risk <- sum(exp(beta23*(t - at_risk$intxrel)))
  haz23 <- dN23/weigthed_at_risk
  return(haz23)}
basehaz23_table <- as.data.table(cbind(time23, sapply(time23,basehaz23)))


haz23_linrel <- function(s,x){ #alpha23(x | T_j2 = s) = basehaz23(x)*exp(beta23(x-s))
  if (x %in% time23){
    haz <- basehaz23_table[basehaz23_table$time23 == x]$V2*exp(beta23*(x - s))}
  else {haz <- 0}
  return(haz)}

p22_linrel_slow <- function(start,end){
  if (start > end){p22 <- NA}
  else{
    times <- time23[time23 > start & time23 <= end]
    if (length(times) == 0){p22 <- 1}
    else {
      terms <- sapply(times, haz23_linrel, s = start)
      int <- sum(terms)
      p22 <- exp(-int)}}
  return(p22)}

# -----------------------------------------------------------------------------
# For reproducing data.table p22_linrel_table. Takes approximately 10 minutes
#Table of p22 with linear effect of relapse as covariate.
#p22_linrel_table_raw <- matrix(NA, nrow = length(timej2), ncol = length(time23))
#rownames(p22_linrel_table_raw) <- timej2
#colnames(p22_linrel_table_raw) <- time23
#for (i in 1:length(timej2)){
#  for (j in 1:length(time23)){
#    if (timej2[i] > time23[j]){p22_linrel_table_raw[i,j] <- NA}
#    else {p22_linrel_table_raw[i,j] <- p22_linrel_slow(timej2[i],time23[j])}}}
#p22_linrel_table <- as.data.table(p22_linrel_table_raw, keep.rownames = TRUE)
# -----------------------------------------------------------------------------

p22_linrel_table <- read.csv("temp/p22_linrel_table.csv")
colnames(p22_linrel_table) <- c("rn", time23)
p22_linrel_table <- as.data.table(p22_linrel_table)

#P_22(s,t)with linear effect of relapse as covariate.
p22_linrel <- function(start,end){
  end_point <- length(time23[time23 <=end]) + 1
  start_point <- length(timej2[timej2 <= start])
  p22 <- as.numeric(p22_linrel_table[start_point, end_point, with = FALSE])
  if (is.na(p22)) {p22 <- 1}
  return(p22)}


# S = 3 ####################################################################### 

#P_{0->2}(3,t) = \int_{3}^{t} P_00(3,u-)alpha02(u)P_22(u,t)
p02_direct_linrel_s3 <- function(t){
  time <- p00alpha02_s3[, 1][p00alpha02_s3[, 1] <= t]
  if (length(time) == 0){prob02 <- 0}
  else{
    p00alpha2 <- p00alpha02_s3[, 4][p00alpha02_s3[, 1] <= t]
    p22 <- sapply(time, p22_linrel, end = t)
    prob02 <- sum(p00alpha2*p22)}
  return(prob02)}

#P_{0->1->2}(3,t) = \int_{3}^{t} (P_00(3,u-)alpha01(u) \int_{u}^{t} (P_11(u,x-)alpha12(x)P_22(x,t)))
p02_non_direct_linrel_s3 <- function(t){
  time <- p00alpha01_s3[, 1][p00alpha01_s3[, 1] <= t]
  if (length(time) == 0){prob02 <- 0}
  else{
    p00alpha1 <- p00alpha01_s3[, 4][p00alpha01_s3[, 1] <= t]
    p12 <- rep(0, length(time))
    possible_time12 <- time12[time12 < t]
    for (i in 1:length(time)){
      time12_sub <- possible_time12[possible_time12 > time[i]]
      if (length(time12_sub) == 0){p12[i] <- 0}
      else{
        p11alpha2 <- vapply(time12_sub, p11alpha12, start = time[i], numeric(1))
        p22 <- sapply(time12_sub, p22_linrel, end = t)
        p12[i] <- sum(p11alpha2*p22)}}
    prob02 <- sum(p00alpha1*p12)}
  return(prob02)}

#P_02(s,t) = P_{0->2}(s,t) + P_{0 -> 1 -> 2}(s,t)
p02_linrel_s3 <- function(t){
  return(p02_direct_linrel_s3(t) + p02_non_direct_linrel_s3(t))}


# s = 9 ######################################################################

#P_{0->2}(9,t) = \int_{9}^{t} P_00(9,u-)alpha02(u)P_22(u,t)
p02_direct_linrel_s9 <- function(t){
  time <- p00alpha02_s9[, 1][p00alpha02_s9[, 1] <= t]
  if (length(time) == 0){prob02 <- 0}
  else{
    p00alpha2 <- p00alpha02_s9[, 4][p00alpha02_s9[, 1] <= t]
    p22 <- sapply(time, p22_linrel, end = t)
    prob02 <- sum(p00alpha2*p22)}
  return(prob02)}

#P_{0 -> 1 -> 2}(9,t) = \int_{9}^{t} (P_00(9,u-)alpha01(u) \int_{u}^{t} (P_11(u,x-)alpha12(x)P_22(x,t)))
p02_non_direct_linrel_s9 <- function(t){
  time <- p00alpha01_s9[, 1][p00alpha01_s9[, 1] <= t]
  if (length(time) == 0){prob02 <- 0}
  else{
    p00alpha1 <- p00alpha01_s9[, 4][p00alpha01_s9[, 1] <= t]
    p12 <- rep(0, length(time))
    possible_time12 <- time12[time12 < t]
    for (i in 1:length(time)){
      time12 <- possible_time12[possible_time12 > time[i]]
      if (length(time12) == 0){p12[i] <- 0}
      else{
        p11alpha2 <- sapply(time12, p11alpha12, start = time[i])
        p22 <- sapply(time12, p22_linrel, end = t)
        p12[i] <- sum(p11alpha2*p22)}}
    prob02 <- sum(p00alpha1*p12)}
  return(prob02)}

#P_02(s,t) = P_{0->2}(s,t) + P_{0 -> 1 -> 2}(s,t)
p02_linrel_s9 <- function(t){
  return(p02_direct_linrel_s9(t) + p02_non_direct_linrel_s9(t))}


# Table 5.5 #################################################################

cox12 <- coxph(formula = Surv(tgvhd, intxrel, rel) ~ tt(tgvhd), data = subset(bmt, gvhd ==1), tt = function(x, t, ...) t - x, method = "breslow")
summary(cox12)

cox13 <- coxph(formula = Surv(tgvhd, intxsurv, dead) ~ tt(tgvhd), data = subset(bmt, gvhd ==1), tt = function(x, t, ...) t - x, method = "breslow")
summary(cox13)

cox23 <- coxph(formula = Surv(intxrel, intxsurv, dead) ~ tt(intxrel), data = subset(bmt, rel == 1), tt = function(x, t, ...) t - x, method = "breslow")
summary(cox23)
```

## SAS-NA

:::

### Figure 5.10

::: {.panel-tabset}

## R
```{r}
#| label: figure-5.10-r
#| 
#For reproducing the data.frame semi_s3_data - takes approximately 1.5 hour
#Data.frame for plotting semi-Markov
#time_semi_s3 <- seq(3.01, 60, by = 0.03)
#semi_p02_s3 <- sapply(time_semi_s3, p02_semi_s3)
#semi_s3_data <- as.data.frame(cbind(time_semi_s3, semi_p02_s3))
#colnames(semi_s3_data) <- c("time", "pstate3")

semi_s3_data <- read.csv("temp/semi_s3_data.csv")

#LM Pepe data for plot with s = 3
time_pepe_s3 <- seq(3.01,60,0.01)
est_pepe_s3 <- sapply(time_pepe_s3, LMPepe_s3)
data_pepe_s3 <- as.data.frame(cbind(time_pepe_s3, est_pepe_s3))

# -----------------------------------------------------------------------------
# For reproducing the data.frame lingvhd_s3_data. Takes approximately 1 hour
# Plug-in (linear effect of duration of gvhd) data for plot with s = 3
#time_lingvhd_s3 <- seq(3.01,60,by = 0.03)
#lingvhd_p02_s3 <- sapply(time_lingvhd_s3, p02_lingvhd_s3)
#lingvhd_s3_data <- as.data.frame(cbind(time_lingvhd_s3,lingvhd_p02_s3))
#colnames(lingvhd_s3_data) <- c("time", "pstate3")
# -----------------------------------------------------------------------------

lingvhd_s3_data <- read.csv("temp/data_lingvhd_s3.csv")

#For reproducing the data.frame linrel_s3_data. Takes approximately 1.5 hour
#time_linrel_s3 <- AJ3_max60$time
#time_linrel_s3 <- seq(3.01, 60, by = 0.03)
#linrel_p02_s3 <- sapply(time_linrel_s3, p02_linrel_s3)
#linrel_s3_data <- as.data.frame(cbind(time_linrel_s3, linrel_p02_s3))
#colnames(linrel_s3_data) <- c("time", "pstate3")

linrel_s3_data <- read.csv("temp/linrel_s3_data.csv")

fig5.10 <- ggplot(AJ3_max60,aes(time,pstate3)) + 
  geom_step(data=semi_s3_data,aes(linetype="Semi")) +
  geom_step(data=lingvhd_s3_data,aes(linetype="LinGvHD")) +
  geom_step(data=linrel_s3_data,aes(linetype="LinRel")) +
  geom_step(aes(linetype="AaJ"))+
  geom_step(data=LMAJ3_max60,aes(linetype="LM AaJ")) +
  geom_step(data = data_pepe_s3, aes(x = time_pepe_s3, y = est_pepe_s3, linetype = "LM Pepe")) +
  xlab("Time since bone marrow transplantation (months)") +
  ylab("Probability") +
  scale_x_continuous(expand = expansion(mult = c(0.005, 0.05)), 
                     limits = c(0, 60), breaks = seq(0, 60, by = 12)) + 
  scale_linetype_manual(values = c("solid", "twodash", "dotted", "longdash", "dotdash", "dashed")) +
  theme_general + 
  theme(legend.key.width = unit(1.5,"cm"),
        legend.title=element_blank(),
        legend.text = element_text(size = 22))

fig5.10
```

## SAS-NA

:::


### Figure 5.11

::: {.panel-tabset}

## R
```{r}
#| label: figure-5.11-r
#For reproducing the data.frame semi_s9_data - takes approximately 15 minutes
#Data.frame for plotting semi-Markov
#time_semi_s9 <- seq(9.01, 60, by = 0.03)
#semi_p02_s9 <- sapply(time_semi_s9, p02_semi_s9)
#semi_s9_data <- as.data.frame(cbind(time_semi_s9, semi_p02_s9))
#colnames(semi_s9_data) <- c("time", "pstate3")

semi_s9_data <- read.csv("temp/semi_s9_data.csv")

#LM Pepe data for plot with s = 9
time_pepe_s9 <- seq(9.01,60,0.01)
est_pepe_s9 <- sapply(time_pepe_s9, LMPepe_s9)
data_pepe_s9 <- as.data.frame(cbind(time_pepe_s9,est_pepe_s9))

# For reproducing lingvhd_s9_data. Takes approximately 10 minutes.
#Plug-in (linear effect of duration of gvhd) data for plot with s = 9
#time_lingvhd_s9 <- seq(9.01,60,by = 0.03)
#lingvhd_p02_s9 <- sapply(time_lingvhd_s9, p02_lingvhd_s9)
#lingvhd_s9_data <- as.data.frame(cbind(time_lingvhd_s9,lingvhd_p02_s9))
#colnames(lingvhd_s9_data) <- c("time", "pstate3")

lingvhd_s9_data <- read.csv("temp/lingvhd_s9_data.csv")

#For reproducing the data.frame linrel_s9_data. Takes approximately 30 minutes
#time_linrel_s9 <- seq(9.01, 60, by = 0.03)
#linrel_p02_s9 <- sapply(time_linrel_s9, p02_linrel_s9)
#linrel_s9_data <- as.data.frame(cbind(time_linrel_s9, linrel_p02_s9))
#colnames(linrel_s9_data) <- c("time", "pstate3")

linrel_s9_data <- read.csv("temp/linrel_s9_data.csv")

fig5.11 <- ggplot(AJ9_max60,aes(time,pstate3)) + 
  geom_step(data=semi_s9_data,aes(linetype="Semi")) +
  geom_step(data=lingvhd_s9_data,aes(linetype="LinGvHD")) +
  geom_step(data=linrel_s9_data,aes(linetype="LinRel")) +
  geom_step(data = data_pepe_s9, aes(x = time_pepe_s9, y = est_pepe_s9, linetype= "LM Pepe")) +
  geom_step(aes(linetype="AaJ"))+
  geom_step(data=LMAJ9_max60,aes(linetype="LM AaJ")) +
  xlab("Time since bone marrow transplantation (months)") +
  ylab("Probability") +
  ylim(0,0.035)  +
  scale_x_continuous(expand = expansion(mult = c(0.005, 0.05)), 
                     limits = c(0, 60), breaks = seq(0, 60, by = 12)) + 
  scale_linetype_manual(values = c("solid", "twodash", "dotted", "longdash", "dotdash", "dashed")) +
  theme_general + 
  theme(legend.key.width = unit(1.5,"cm"),
        legend.title=element_blank(),
        legend.text = element_text(size = 22))

fig5.11
```

## SAS-NA

:::


